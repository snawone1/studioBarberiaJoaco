{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/page-header.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\";\n\ninterface PageHeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n  title: string;\n  description?: string;\n  titleClassName?: string;\n  descriptionClassName?: string;\n}\n\nexport function PageHeader({\n  title,\n  description,\n  titleClassName,\n  descriptionClassName,\n  className,\n  ...props\n}: PageHeaderProps) {\n  return (\n    <div className={cn(\"py-12 text-center animate-fade-in\", className)} {...props}>\n      <h1\n        className={cn(\n          \"text-4xl font-bold tracking-tight sm:text-5xl lg:text-6xl font-headline text-foreground\",\n          titleClassName\n        )}\n      >\n        {title}\n      </h1>\n      {description && (\n        <p\n          className={cn(\n            \"mt-4 max-w-2xl mx-auto text-lg text-muted-foreground\",\n            descriptionClassName\n          )}\n        >\n          {description}\n        </p>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AASO,SAAS,WAAW,EACzB,KAAK,EACL,WAAW,EACX,cAAc,EACd,oBAAoB,EACpB,SAAS,EACT,GAAG,OACa;IAChB,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,qCAAqC;QAAa,GAAG,KAAK;;0BAC3E,8OAAC;gBACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2FACA;0BAGD;;;;;;YAEF,6BACC,8OAAC;gBACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,wDACA;0BAGD;;;;;;;;;;;;AAKX","debugId":null}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { AppointmentFormValues, SiteSettingsFormValues, StyleAdvisorFormValues, ProductFormValues, ServiceFormValues } from '@/lib/schemas';\nimport { getStyleRecommendationWithServices } from '@/ai/flows/style-recommendation-with-services';\nimport type { Product } from '@/app/products/page';\nimport { revalidatePath } from 'next/cache';\nimport { firestore } from '@/lib/firebase';\nimport { collection, getDocs, addDoc, deleteDoc, doc, Timestamp, updateDoc, getDoc, query, where, orderBy, setDoc } from 'firebase/firestore';\nimport { ALL_TIME_SLOTS } from '@/lib/constants'; \nimport { siteConfig } from '@/config/site';\n\n// Firestore collection references\nconst appointmentsCollectionRef = collection(firestore, 'appointments');\nconst productsCollectionRef = collection(firestore, 'products');\nconst usersCollectionRef = collection(firestore, 'users');\nconst servicesCollectionRef = collection(firestore, 'services');\nconst timeSlotSettingsCollectionRef = collection(firestore, 'timeSlotSettings');\nconst messageTemplatesCollectionRef = collection(firestore, 'messageTemplates');\n\n\n// --- User Types ---\nexport type UserDetail = {\n  id: string; \n  fullName: string;\n  email: string;\n  phoneNumber: string;\n  createdAt: string; \n};\n\n\n// --- Appointment Types ---\nexport type Appointment = {\n  id: string;\n  userId: string;\n  userName?: string;\n  userEmail?: string;\n  userPhone?: string;\n  preferredDate: string; \n  preferredTime: string;\n  services: string[]; \n  message?: string;\n  status: string; \n  createdAt: string; \n};\n\n// --- Service Type ---\nexport type Service = {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  createdAt?: string; \n};\n\n// --- Time Slot Settings Types ---\nexport type TimeSlotSetting = {\n  time: string;\n  isActive: boolean;\n};\n\n// --- Message Template Type ---\nexport type MessageTemplate = {\n  id: string; // e.g., 'confirmation', 'cancellation'\n  content: string;\n};\n\n\n// --- User Management Actions ---\nexport async function getUsers(): Promise<UserDetail[]> {\n  // console.log(\"Admin: Attempting to fetch users from Firestore...\");\n  try {\n    const q = query(usersCollectionRef, orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    // console.log(`Admin: Found ${querySnapshot.docs.length} user documents.`);\n\n    if (querySnapshot.empty) {\n      // console.warn(\"Admin: No users found in the 'users' collection or access denied by Firestore security rules.\");\n      return [];\n    }\n\n    const users = querySnapshot.docs.map(docSnap => {\n      const data = docSnap.data();\n      let createdAtISO: string;\n\n      if (data.createdAt && typeof data.createdAt === 'string') {\n        createdAtISO = data.createdAt;\n      } else if (data.createdAt && typeof data.createdAt.toDate === 'function') {\n        createdAtISO = data.createdAt.toDate().toISOString();\n      } else {\n        // console.warn(`Admin: User ${docSnap.id} has invalid or missing createdAt. Firestore data:`, data.createdAt);\n        createdAtISO = new Date(0).toISOString();\n      }\n      \n      const userDetail: UserDetail = {\n        id: docSnap.id,\n        fullName: data.fullName || 'N/A',\n        email: data.email || 'N/A',\n        phoneNumber: data.phoneNumber || 'N/A',\n        createdAt: createdAtISO,\n      };\n      return userDetail;\n    });\n    // console.log(`Admin: Successfully mapped ${users.length} users.`);\n    return users;\n\n  } catch (error: any) {\n    console.error(\"Admin: Error fetching or mapping users from Firestore:\", error);\n    if (error.code === 'failed-precondition') {\n        console.error(\"IMPORTANT: Firestore 'failed-precondition' error for users query. This might mean a composite index is required if you add more complex ordering or filtering. Check Firestore console for index suggestions.\");\n    } else {\n        console.error(\"An unexpected error occurred while fetching users:\", error.message, error.stack);\n    }\n    return [];\n  }\n}\n\n\n// --- Appointment Actions ---\nexport async function submitAppointmentRequest(data: AppointmentFormValues) {\n  console.log(\"Server Action: submitAppointmentRequest received data with userId:\", data.userId);\n  try {\n    const clientPreferredDate = data.preferredDate; \n    \n    const normalizedPreferredDateObject = new Date(clientPreferredDate);\n    normalizedPreferredDateObject.setHours(0, 0, 0, 0); \n    \n    const preferredDateTimestamp = Timestamp.fromDate(normalizedPreferredDateObject);\n    console.log(\"Server Action: Normalized preferredDate to Timestamp:\", preferredDateTimestamp.toDate().toISOString());\n\n    const qCheck = query(\n      appointmentsCollectionRef,\n      where('preferredDate', '==', preferredDateTimestamp),\n      where('preferredTime', '==', data.preferredTime),\n      where('status', 'in', ['pending', 'confirmed'])\n    );\n\n    const existingAppointmentsSnap = await getDocs(qCheck);\n    if (!existingAppointmentsSnap.empty) {\n      console.log(\"Server Action: Double booking detected for\", preferredDateTimestamp.toDate().toISOString(), data.preferredTime);\n      return { success: false, message: 'Este horario ya no está disponible. Por favor, elige otro.' };\n    }\n\n    const appointmentData = {\n      userId: data.userId,\n      preferredDate: preferredDateTimestamp, \n      preferredTime: data.preferredTime,\n      services: data.services,\n      message: data.message || '',\n      status: 'pending', \n      createdAt: Timestamp.now(),\n    };\n    console.log(\"Server Action: Attempting to add appointment to Firestore with data:\", appointmentData);\n    await addDoc(appointmentsCollectionRef, appointmentData);\n    console.log(\"Server Action: Appointment added successfully.\");\n    revalidatePath('/book'); \n    revalidatePath('/admin'); \n    return { success: true, message: 'Solicitud de cita enviada con éxito. Nos pondremos en contacto contigo pronto para confirmar.' };\n  } catch (error)\n{\n    console.error(\"Server Action: Error submitting appointment to Firestore:\", error);\n    return { success: false, message: 'Error al enviar la solicitud de cita. Por favor, inténtalo de nuevo.' };\n  }\n}\n\nexport async function getAppointments(): Promise<Appointment[]> {\n  // console.log(\"Admin: Attempting to fetch appointments from Firestore (with orderBy)...\");\n  try {\n    const qAppointments = query(\n      appointmentsCollectionRef, \n      orderBy('preferredDate', 'desc'), \n      orderBy('createdAt', 'desc') \n    );\n    // console.log(\"Admin: Using query with orderBy('preferredDate', 'desc'), orderBy('createdAt', 'desc').\");\n\n    const appointmentSnapshot = await getDocs(qAppointments);\n    // console.log(`Admin: Found ${appointmentSnapshot.docs.length} appointment documents in total.`);\n    \n    if (appointmentSnapshot.empty) {\n      // console.warn(\"Admin: No appointments matched the query. This could be due to Firestore security rules or no appointments existing.\");\n      return [];\n    }\n\n    const userIds = [...new Set(appointmentSnapshot.docs.map(docSnap => docSnap.data().userId as string).filter(id => !!id))];\n    let usersMap: Map<string, { fullName?: string; email?: string; phoneNumber?: string }> = new Map();\n\n    if (userIds.length > 0) {\n      const MAX_USER_IDS_PER_QUERY = 30; \n      const userBatches: string[][] = [];\n      for (let i = 0; i < userIds.length; i += MAX_USER_IDS_PER_QUERY) {\n        userBatches.push(userIds.slice(i, i + MAX_USER_IDS_PER_QUERY));\n      }\n\n      for (const batchUserIds of userBatches) {\n        if (batchUserIds.length === 0) continue;\n        const qUsers = query(collection(firestore, 'users'), where('uid', 'in', batchUserIds));\n        const userSnapshot = await getDocs(qUsers);\n        userSnapshot.docs.forEach(docSnap => {\n          const userData = docSnap.data();\n          usersMap.set(userData.uid, { \n            fullName: userData.fullName, \n            email: userData.email, \n            phoneNumber: userData.phoneNumber \n          });\n        });\n      }\n    }\n    // console.log(`Admin: Fetched details for ${usersMap.size} users.`);\n\n    const appointments = appointmentSnapshot.docs.map(docSnap => {\n      const data = docSnap.data();\n      let preferredDateISO: string;\n      let createdAtISO: string;\n\n      if (data.preferredDate && typeof data.preferredDate.toDate === 'function') {\n        preferredDateISO = data.preferredDate.toDate().toISOString();\n      } else {\n        // console.warn(`Admin: Appointment ${docSnap.id} has invalid or missing preferredDate. Firestore data:`, data.preferredDate);\n        preferredDateISO = new Date(0).toISOString(); \n      }\n\n      if (data.createdAt && typeof data.createdAt.toDate === 'function') {\n        createdAtISO = data.createdAt.toDate().toISOString();\n      } else {\n        // console.warn(`Admin: Appointment ${docSnap.id} has invalid or missing createdAt. Firestore data:`, data.createdAt);\n        createdAtISO = new Date(0).toISOString(); \n      }\n      \n      const userDetails = usersMap.get(data.userId) || {};\n\n      const appointment: Appointment = {\n        id: docSnap.id,\n        userId: data.userId || 'Unknown User',\n        userName: userDetails.fullName || 'Nombre no disponible',\n        userEmail: userDetails.email || 'Email no disponible',\n        userPhone: userDetails.phoneNumber || 'Teléfono no disponible',\n        preferredDate: preferredDateISO,\n        preferredTime: data.preferredTime || 'N/A', \n        services: Array.isArray(data.services) ? data.services : [], \n        message: data.message || '',\n        status: data.status || 'unknown', \n        createdAt: createdAtISO,\n      };\n      return appointment;\n    });\n    // console.log(`Admin: Successfully mapped ${appointments.length} appointments.`);\n    return appointments; \n\n  } catch (error: any) { \n    console.error(\"Admin: Error fetching or mapping appointments from Firestore:\", error);\n     if (error.code === 'failed-precondition') { \n        console.error(\"IMPORTANT: Firestore 'failed-precondition' error for admin appointments query. This OFTEN means a composite index is required for your query (e.g., for orderBy clauses on 'preferredDate' and 'createdAt'). Check the DETAILED error message in the Firebase/Next.js server console. It usually provides a link to create the missing index.\");\n    } else {\n        console.error(\"An unexpected error occurred while fetching admin appointments:\", error.message, error.stack);\n    }\n    return [];\n  }\n}\n\nexport async function getUserAppointments(userId: string): Promise<Appointment[]> {\n  console.log(`Server Action: Attempting to fetch appointments for user ID: ${userId}`);\n  if (!userId) {\n    console.warn(\"Server Action: getUserAppointments called with no userId.\");\n    return [];\n  }\n  try {\n    const qUserAppointments = query(\n      appointmentsCollectionRef,\n      where('userId', '==', userId),\n      orderBy('preferredDate', 'desc'),\n      orderBy('createdAt', 'desc')\n    );\n\n    const appointmentSnapshot = await getDocs(qUserAppointments);\n    console.log(`Server Action: Found ${appointmentSnapshot.docs.length} appointments for user ${userId}.`);\n\n    if (appointmentSnapshot.empty) {\n      return [];\n    }\n\n    const appointments = appointmentSnapshot.docs.map(docSnap => {\n      const data = docSnap.data();\n      let preferredDateISO: string;\n      let createdAtISO: string;\n\n      if (data.preferredDate && typeof data.preferredDate.toDate === 'function') {\n        preferredDateISO = data.preferredDate.toDate().toISOString();\n      } else {\n        preferredDateISO = new Date(0).toISOString();\n      }\n\n      if (data.createdAt && typeof data.createdAt.toDate === 'function') {\n        createdAtISO = data.createdAt.toDate().toISOString();\n      } else {\n        createdAtISO = new Date(0).toISOString();\n      }\n      \n      return {\n        id: docSnap.id,\n        userId: data.userId,\n        preferredDate: preferredDateISO,\n        preferredTime: data.preferredTime || 'N/A',\n        services: Array.isArray(data.services) ? data.services : [],\n        message: data.message || '',\n        status: data.status || 'unknown',\n        createdAt: createdAtISO,\n      } as Appointment;\n    });\n    console.log(`Server Action: Successfully mapped ${appointments.length} appointments for user ${userId}.`);\n    return appointments;\n\n  } catch (error: any) {\n    console.error(`Server Action: Error fetching appointments for user ${userId}:`, error);\n    if (error.code === 'failed-precondition') {\n      console.error(\"IMPORTANT: Firestore 'failed-precondition' error for user appointments query. A composite index on 'userId' (asc), 'preferredDate' (desc), 'createdAt' (desc) might be required in the 'appointments' collection. Check Firestore console for index suggestions.\");\n    }\n    return [];\n  }\n}\n\nexport async function updateAppointmentStatus(\n  appointmentId: string, \n  newStatus: 'pending' | 'confirmed' | 'cancelled' | 'completed',\n  currentUserId?: string // Optional: for client-side cancellation validation\n) {\n  console.log(`Server Action: updateAppointmentStatus called for ID: ${appointmentId} to status: ${newStatus}. CurrentUserID: ${currentUserId}`);\n  try {\n    const appointmentDocRef = doc(firestore, 'appointments', appointmentId);\n\n    if (currentUserId && newStatus === 'cancelled') {\n      // Client is trying to cancel their own appointment\n      const appointmentSnap = await getDoc(appointmentDocRef);\n      if (!appointmentSnap.exists()) {\n        return { success: false, message: 'La cita no fue encontrada.' };\n      }\n      const appointmentData = appointmentSnap.data();\n      if (appointmentData.userId !== currentUserId) {\n        return { success: false, message: 'No tienes permiso para cancelar esta cita.' };\n      }\n      if (appointmentData.status !== 'pending') {\n        return { success: false, message: 'Solo puedes cancelar citas que estén pendientes.' };\n      }\n    } else if (currentUserId && newStatus !== 'cancelled') {\n      // Prevent client from changing status to anything other than 'cancelled'\n      return { success: false, message: 'No tienes permiso para realizar esta acción.' };\n    }\n\n    await updateDoc(appointmentDocRef, { status: newStatus });\n    console.log(`Server Action: Appointment ${appointmentId} status updated to ${newStatus} in Firestore.`);\n    revalidatePath('/admin');\n    revalidatePath('/book'); \n    return { success: true, message: `Estado de la cita actualizado a ${newStatus}.` };\n  } catch (error) {\n    console.error(`Server Action: Error updating appointment ${appointmentId} status in Firestore:`, error);\n    return { success: false, message: 'Error al actualizar el estado de la cita.' };\n  }\n}\n\n\nexport async function getBookedSlotsForDate(date: Date): Promise<string[]> {\n  try {\n    const targetDay = new Date(date);\n    targetDay.setHours(0,0,0,0); \n\n    const q = query(\n      appointmentsCollectionRef,\n      where('preferredDate', '==', Timestamp.fromDate(targetDay)),\n      where('status', 'in', ['pending', 'confirmed'])\n    );\n    const querySnapshot = await getDocs(q);\n    const bookedSlots = querySnapshot.docs.map(docSnap => docSnap.data().preferredTime as string);\n    return bookedSlots;\n  } catch (error) {\n    console.error(\"Error fetching booked slots:\", error);\n    return [];\n  }\n}\n\n\n// --- AI Style Advice Actions ---\nexport async function getAIStyleAdvice(data: StyleAdvisorFormValues) {\n  try {\n    const recommendation = await getStyleRecommendationWithServices({\n      hairType: data.hairType,\n      faceShape: data.faceShape,\n      preferences: data.stylePreferences,\n    });\n    return { success: true, data: recommendation };\n  } catch (error) {\n    console.error('Error getting AI style advice:', error);\n    return { success: false, message: 'Failed to get style advice. Please try again later.' };\n  }\n}\n\n// --- Site Settings Actions ---\nexport async function submitSiteSettings(data: SiteSettingsFormValues) {\n  // console.log('Site Settings Update Received by Server Action:', data);\n  revalidatePath('/admin/settings'); \n  revalidatePath('/'); \n  return { success: true, message: 'Configuración del sitio procesada. Los cambios en nombre y descripción se reflejarán en breve (puede requerir refrescar la página o reconstrucción).' };\n}\n\n\n// --- Product Management Actions ---\nexport async function getProducts(): Promise<Product[]> {\n  try {\n    const querySnapshot = await getDocs(productsCollectionRef);\n    const products = querySnapshot.docs.map(docSnap => {\n      const data = docSnap.data();\n      let imageSrcVal = 'https://placehold.co/400x400.png';\n      if (typeof data.imageSrc === 'string' && (data.imageSrc.startsWith('http://') || data.imageSrc.startsWith('https://'))) {\n        imageSrcVal = data.imageSrc;\n      } else if (data.imageSrc && data.imageSrc.trim() !== '') {\n        // console.warn(`Product ID ${docSnap.id} has an imageSrc in Firestore that is not a valid http/https URL or is empty: \"${data.imageSrc}\". Defaulting to placeholder.`);\n      } else if (!data.imageSrc) {\n         // console.warn(`Product ID ${docSnap.id} is missing imageSrc in Firestore. Defaulting to placeholder.`);\n      }\n      \n      return {\n        id: docSnap.id,\n        name: data.name || 'Unnamed Product',\n        description: data.description || '',\n        price: data.price || 'ARS$ 0',\n        imageSrc: imageSrcVal,\n        aiHint: data.aiHint || '',\n        stock: typeof data.stock === 'number' ? data.stock : 0,\n        createdAt: data.createdAt ? (data.createdAt as Timestamp).toDate().toISOString() : undefined,\n      } as Product;\n    });\n    return products;\n  } catch (error) {\n    console.error(\"Error fetching products from Firestore:\", error);\n    return [];\n  }\n}\n\nexport async function addProduct(data: ProductFormValues) {\n  try {\n    const productDataToAdd = {\n      name: data.name,\n      description: data.description,\n      price: data.price,\n      imageSrc: data.imageSrc,\n      aiHint: data.aiHint,\n      stock: data.stock ?? 0,\n      createdAt: Timestamp.now()\n    };\n    const docRef = await addDoc(productsCollectionRef, productDataToAdd);\n    const newProduct: Product = {\n      id: docRef.id,\n      ...productDataToAdd,\n      createdAt: productDataToAdd.createdAt.toDate().toISOString(),\n    };\n    revalidatePath('/products');\n    revalidatePath('/admin/settings'); \n    revalidatePath('/admin');\n    return { success: true, message: 'Producto añadido con éxito a Firestore.', product: newProduct };\n  } catch (error) {\n    console.error(\"Error adding product to Firestore:\", error);\n    return { success: false, message: 'Error al añadir el producto a Firestore. Inténtalo de nuevo.' };\n  }\n}\n\nexport async function updateProduct(data: ProductFormValues) {\n  if (!data.id) {\n    return { success: false, message: 'Product ID is missing for update.' };\n  }\n  try {\n    const productDocRef = doc(firestore, 'products', data.id);\n    const productDataToUpdate = {\n      name: data.name,\n      description: data.description,\n      price: data.price,\n      imageSrc: data.imageSrc,\n      aiHint: data.aiHint,\n      stock: data.stock ?? 0,\n    };\n    await updateDoc(productDocRef, productDataToUpdate);\n    const updatedDocSnap = await getDoc(productDocRef);\n    if (!updatedDocSnap.exists()) {\n        return { success: false, message: 'Failed to retrieve updated product.' };\n    }\n    const updatedData = updatedDocSnap.data();\n    let imageSrcVal = 'https://placehold.co/400x400.png';\n    if (typeof updatedData.imageSrc === 'string' && (updatedData.imageSrc.startsWith('http://') || updatedData.imageSrc.startsWith('https://'))) {\n        imageSrcVal = updatedData.imageSrc;\n    }\n    const updatedProduct: Product = {\n      id: updatedDocSnap.id,\n      name: updatedData.name,\n      description: updatedData.description,\n      price: updatedData.price,\n      imageSrc: imageSrcVal,\n      aiHint: updatedData.aiHint,\n      stock: updatedData.stock,\n      createdAt: updatedData.createdAt ? (updatedData.createdAt as Timestamp).toDate().toISOString() : undefined,\n    };\n    revalidatePath('/products');\n    revalidatePath('/admin/settings');\n    revalidatePath('/admin');\n    return { success: true, message: 'Producto actualizado con éxito.', product: updatedProduct };\n  } catch (error) {\n    console.error(\"Error updating product in Firestore:\", error);\n    return { success: false, message: 'Error al actualizar el producto. Inténtalo de nuevo.' };\n  }\n}\n\nexport async function deleteProduct(productId: string) {\n  try {\n    const productDocRef = doc(firestore, 'products', productId);\n    await deleteDoc(productDocRef);\n    revalidatePath('/products');\n    revalidatePath('/admin/settings');\n    revalidatePath('/admin');\n    return { success: true, message: 'Producto eliminado con éxito de Firestore.' };\n  } catch (error) {\n    console.error(\"Error deleting product from Firestore:\", error);\n    return { success: false, message: 'Error al eliminar el producto de Firestore. Inténtalo de nuevo.' };\n  }\n}\n\n\n// --- Service Management Actions ---\nexport async function getServices(): Promise<Service[]> {\n  try {\n    const q = query(servicesCollectionRef, orderBy('name', 'asc'));\n    const querySnapshot = await getDocs(q);\n    const services = querySnapshot.docs.map(docSnap => {\n      const data = docSnap.data();\n      return {\n        id: docSnap.id,\n        name: data.name || 'Unnamed Service',\n        description: data.description || '',\n        price: data.price || 'ARS$ 0',\n        createdAt: data.createdAt ? (data.createdAt as Timestamp).toDate().toISOString() : undefined,\n      } as Service;\n    });\n    return services;\n  } catch (error) {\n    console.error(\"Error fetching services from Firestore:\", error);\n    return [];\n  }\n}\n\nexport async function addService(data: ServiceFormValues) {\n  try {\n    const serviceDataToAdd = {\n      name: data.name,\n      description: data.description,\n      price: data.price,\n      createdAt: Timestamp.now()\n    };\n    const docRef = await addDoc(servicesCollectionRef, serviceDataToAdd);\n    const newService: Service = {\n      id: docRef.id,\n      ...serviceDataToAdd,\n      createdAt: serviceDataToAdd.createdAt.toDate().toISOString(),\n    };\n    revalidatePath('/admin/settings');\n    revalidatePath('/book');\n    return { success: true, message: 'Servicio añadido con éxito.', service: newService };\n  } catch (error) {\n    console.error(\"Error adding service to Firestore:\", error);\n    return { success: false, message: 'Error al añadir el servicio.' };\n  }\n}\n\nexport async function updateService(data: ServiceFormValues) {\n  if (!data.id) {\n    return { success: false, message: 'Service ID is missing for update.' };\n  }\n  try {\n    const serviceDocRef = doc(firestore, 'services', data.id);\n    const serviceDataToUpdate = {\n      name: data.name,\n      description: data.description,\n      price: data.price,\n    };\n    await updateDoc(serviceDocRef, serviceDataToUpdate);\n    \n    const updatedDocSnap = await getDoc(serviceDocRef);\n     if (!updatedDocSnap.exists()) {\n        return { success: false, message: 'Failed to retrieve updated service.' };\n    }\n    const updatedData = updatedDocSnap.data();\n    const updatedService: Service = {\n      id: updatedDocSnap.id,\n      name: updatedData.name,\n      description: updatedData.description,\n      price: updatedData.price,\n      createdAt: updatedData.createdAt ? (updatedData.createdAt as Timestamp).toDate().toISOString() : undefined,\n    };\n\n    revalidatePath('/admin/settings');\n    revalidatePath('/book');\n    return { success: true, message: 'Servicio actualizado con éxito.', service: updatedService };\n  } catch (error) {\n    console.error(\"Error updating service in Firestore:\", error);\n    return { success: false, message: 'Error al actualizar el servicio.' };\n  }\n}\n\nexport async function deleteService(serviceId: string) {\n  try {\n    const serviceDocRef = doc(firestore, 'services', serviceId);\n    await deleteDoc(serviceDocRef);\n    revalidatePath('/admin/settings');\n    revalidatePath('/book');\n    return { success: true, message: 'Servicio eliminado con éxito.' };\n  } catch (error) {\n    console.error(\"Error deleting service from Firestore:\", error);\n    return { success: false, message: 'Error al eliminar el servicio.' };\n  }\n}\n\n// --- Time Slot Settings Actions ---\nexport async function getTimeSlotSettings(): Promise<TimeSlotSetting[]> {\n  try {\n    const snapshot = await getDocs(timeSlotSettingsCollectionRef);\n    const savedSettingsMap = new Map<string, boolean>();\n    snapshot.forEach(docSnap => { \n      savedSettingsMap.set(docSnap.id, docSnap.data().isActive as boolean);\n    });\n\n    // Use ALL_TIME_SLOTS from the imported constants\n    const settings = ALL_TIME_SLOTS.map(time => ({\n      time,\n      isActive: savedSettingsMap.get(time) ?? true, \n    }));\n    return settings;\n  } catch (error) {\n    console.error(\"Error fetching time slot settings:\", error);\n    // Fallback to all active if Firestore read fails\n    return ALL_TIME_SLOTS.map(time => ({ time, isActive: true }));\n  }\n}\n\nexport async function updateTimeSlotSetting(time: string, isActive: boolean) {\n  try {\n    const settingDocRef = doc(timeSlotSettingsCollectionRef, time); \n    await setDoc(settingDocRef, { time, isActive }); \n    revalidatePath('/admin/settings');\n    revalidatePath('/book');\n    return { success: true, message: `Time slot ${time} ${isActive ? 'activated' : 'deactivated'}.` };\n  } catch (error) {\n    console.error(\"Error updating time slot setting:\", error);\n    return { success: false, message: 'Failed to update time slot setting.' };\n  }\n}\n\n// --- WhatsApp Message Template Actions ---\nconst DEFAULT_CONFIRMATION_TEMPLATE = `Hola {{clientName}}, tu cita en ${siteConfig.name} para el {{appointmentDate}} a las {{appointmentTime}} ha sido CONFIRMADA. Servicios: {{servicesList}}. ¡Te esperamos!`;\nconst DEFAULT_CANCELLATION_TEMPLATE = `Hola {{clientName}}, lamentamos informarte que tu cita en ${siteConfig.name} para el {{appointmentDate}} a las {{appointmentTime}} (Servicios: {{servicesList}}) ha sido CANCELADA. Por favor, contáctanos si deseas reprogramar.`;\n\nexport async function getMessageTemplate(templateId: 'confirmation' | 'cancellation'): Promise<string> {\n  try {\n    const templateDocRef = doc(messageTemplatesCollectionRef, templateId);\n    const docSnap = await getDoc(templateDocRef);\n    if (docSnap.exists()) {\n      return docSnap.data().content as string;\n    }\n    return templateId === 'confirmation' ? DEFAULT_CONFIRMATION_TEMPLATE : DEFAULT_CANCELLATION_TEMPLATE;\n  } catch (error) {\n    console.error(`Error fetching message template ${templateId}:`, error);\n    return templateId === 'confirmation' ? DEFAULT_CONFIRMATION_TEMPLATE : DEFAULT_CANCELLATION_TEMPLATE;\n  }\n}\n\nexport async function updateMessageTemplate(templateId: 'confirmation' | 'cancellation', content: string) {\n  try {\n    const templateDocRef = doc(messageTemplatesCollectionRef, templateId);\n    await setDoc(templateDocRef, { content });\n    revalidatePath('/admin/settings');\n    return { success: true, message: `Plantilla de mensaje de ${templateId} actualizada.` };\n  } catch (error) {\n    console.error(`Error updating message template ${templateId}:`, error);\n    return { success: false, message: `Error al actualizar la plantilla de ${templateId}.` };\n  }\n}\n    \n\n    "],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;IAqEsB;IAkDA;IA8CA;IA8FA;IA6DA;IAuCA;IAqBA;IAeA;IASA;IAgCA;IA2BA;IA4CA;IAgBA;IAqBA;IAuBA;IAmCA;IAcA;IAqBA;IAiBA;IAcA","debugId":null}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/products/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { PageHeader } from '@/components/page-header';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';\nimport Image from 'next/image';\nimport { getProducts } from '@/app/actions'; \nimport { Loader2, PackageSearch } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\n\n// Update Product type to expect createdAt as a string (ISO string) and include stock\nexport type Product = {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  imageSrc: string; // Will always be a valid URL or placeholder from actions.ts\n  aiHint: string;\n  stock?: number;\n  createdAt?: string; \n};\n\nexport default function ProductsPage() {\n  const [products, setProducts] = useState<Product[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function fetchProducts() {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const fetchedProducts = await getProducts();\n        setProducts(fetchedProducts.sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()));\n      } catch (err) {\n        setError('Failed to load products. Please try again later.');\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchProducts();\n  }, []);\n\n  return (\n    <div className=\"container mx-auto px-4 py-12\">\n      <PageHeader\n        title=\"Nuestros Productos\"\n        description=\"Descubre nuestra selección de productos premium para el cuidado del cabello y la barba.\"\n      />\n      {isLoading && (\n        <div className=\"flex justify-center items-center py-10\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n          <p className=\"ml-4 text-lg text-muted-foreground\">Cargando productos...</p>\n        </div>\n      )}\n      {error && (\n        <div className=\"text-center py-10\">\n          <p className=\"text-destructive text-lg\">{error}</p>\n        </div>\n      )}\n      {!isLoading && !error && products.length === 0 && (\n        <div className=\"text-center py-20\">\n          <PackageSearch className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground text-xl\">No hay productos disponibles en este momento.</p>\n          <p className=\"text-muted-foreground text-sm\">Vuelve a consultar más tarde o añade productos desde el panel de administración.</p>\n        </div>\n      )}\n      {!isLoading && !error && products.length > 0 && (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n          {products.map((product) => (\n            <Card key={product.id} className=\"flex flex-col overflow-hidden hover:shadow-xl transition-shadow\">\n              <div className=\"relative aspect-square w-full\">\n                <Image\n                  src={product.imageSrc}\n                  alt={product.name}\n                  layout=\"fill\"\n                  objectFit=\"cover\"\n                  data-ai-hint={product.aiHint}\n                />\n                 {typeof product.stock === 'number' && product.stock === 0 && (\n                  <Badge variant=\"destructive\" className=\"absolute top-2 right-2\">Agotado</Badge>\n                )}\n              </div>\n              <CardHeader>\n                <CardTitle className=\"text-xl font-headline\">{product.name}</CardTitle>\n                <CardDescription className=\"text-sm h-16 overflow-hidden text-ellipsis\">{product.description}</CardDescription>\n              </CardHeader>\n              <CardContent className=\"flex-grow\">\n                <p className=\"text-lg font-semibold text-primary\">{product.price}</p>\n              </CardContent>\n              <CardFooter className=\"flex justify-between items-center\">\n                {typeof product.stock === 'number' && product.stock > 0 && (\n                  <p className=\"text-sm text-green-600 dark:text-green-400\">\n                    Stock: {product.stock}\n                  </p>\n                )}\n                 {typeof product.stock === 'number' && product.stock === 0 && (\n                  <p className=\"text-sm text-destructive\">\n                    Agotado\n                  </p>\n                )}\n                 {typeof product.stock !== 'number' && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Stock no disponible\n                  </p>\n                )}\n                {/* Future: Add to cart button \n                <Button className=\"w-full\">Añadir al Carrito</Button>\n                */}\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}