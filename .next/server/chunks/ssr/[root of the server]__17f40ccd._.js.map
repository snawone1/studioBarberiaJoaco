{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/style-recommendation-with-services.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent that provides style recommendations based on user input and considers available barbershop services.\n *\n * - getStyleRecommendationWithServices - A function that provides style recommendations considering barbershop services.\n * - StyleRecommendationWithServicesInput - The input type for the getStyleRecommendationWithServices function.\n * - StyleRecommendationWithServicesOutput - The return type for the getStyleRecommendationWithServices function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst StyleRecommendationWithServicesInputSchema = z.object({\n  hairType: z.string().describe('The user\\'s hair type (e.g., curly, straight, wavy).'),\n  faceShape: z.string().describe('The user\\'s face shape (e.g., oval, square, round).'),\n  preferences: z.string().describe('The user\\'s style preferences and desired look.'),\n});\nexport type StyleRecommendationWithServicesInput = z.infer<typeof StyleRecommendationWithServicesInputSchema>;\n\nconst StyleRecommendationWithServicesOutputSchema = z.object({\n  styleRecommendation: z.string().describe('A detailed style recommendation based on the user input.'),\n  relevantServices: z.array(z.string()).describe('A list of barbershop services that would be helpful in achieving the recommended style.'),\n});\nexport type StyleRecommendationWithServicesOutput = z.infer<typeof StyleRecommendationWithServicesOutputSchema>;\n\nexport async function getStyleRecommendationWithServices(input: StyleRecommendationWithServicesInput): Promise<StyleRecommendationWithServicesOutput> {\n  return styleRecommendationWithServicesFlow(input);\n}\n\nconst barbershopServices = [\n  'Haircut', \n  'Beard Trim',\n  'Coloring', \n  'Highlights', \n  'Perm',\n  'Straightening',\n  'Scalp Treatment'\n];\n\nconst checkServiceRelevanceTool = ai.defineTool({\n  name: 'checkServiceRelevance',\n  description: 'Determines whether a barbershop service is relevant to achieving a specific hairstyle or look.',\n  inputSchema: z.object({\n    styleRecommendation: z.string().describe('The style recommendation being made to the user.'),\n    service: z.string().describe('A specific barbershop service to evaluate for relevance.'),\n  }),\n  outputSchema: z.boolean().describe('Whether the barbershop service is relevant to the style recommendation.'),\n}, async (input) => {\n  // Basic implementation - can be extended with more sophisticated logic.\n  // This simple implementation checks if the service is mentioned in the style recommendation.\n  return input.styleRecommendation.toLowerCase().includes(input.service.toLowerCase());\n});\n\nconst styleRecommendationPrompt = ai.definePrompt({\n  name: 'styleRecommendationPrompt',\n  input: {schema: StyleRecommendationWithServicesInputSchema},\n  output: {schema: StyleRecommendationWithServicesOutputSchema},\n  tools: [checkServiceRelevanceTool],\n  prompt: `You are a professional style advisor at a barbershop. Based on the user's hair type, face shape, and preferences, provide a style recommendation.\n\nHair Type: {{{hairType}}}\nFace Shape: {{{faceShape}}}\nPreferences: {{{preferences}}}\n\nConsider if any of the following services available at the barbershop might be helpful in achieving this style:\n${barbershopServices.join(', ')}\n\nUse the checkServiceRelevance tool to determine if any of the barbershop's services would be helpful in achieving the recommended style. If a service is deemed relevant by the tool, mention it explicitly in the styleRecommendation output field.\n`,\n});\n\nconst styleRecommendationWithServicesFlow = ai.defineFlow(\n  {\n    name: 'styleRecommendationWithServicesFlow',\n    inputSchema: StyleRecommendationWithServicesInputSchema,\n    outputSchema: StyleRecommendationWithServicesOutputSchema,\n  },\n  async input => {\n    const {output} = await styleRecommendationPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,6CAA6C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1D,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGA,MAAM,8CAA8C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3D,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,kBAAkB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AACjD;AAGO,eAAe,uCAAgC,GAAhC,mCAAmC,KAA2C;IAClG,OAAO,oCAAoC;AAC7C;AAEA,MAAM,qBAAqB;IACzB;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAAC;IAC9C,MAAM;IACN,aAAa;IACb,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACpB,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACzC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B;IACA,cAAc,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;AACrC,GAAG,OAAO;IACR,wEAAwE;IACxE,6FAA6F;IAC7F,OAAO,MAAM,mBAAmB,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,OAAO,CAAC,WAAW;AACnF;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAChD,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0C;IAC1D,QAAQ;QAAC,QAAQ;IAA2C;IAC5D,OAAO;QAAC;KAA0B;IAClC,QAAQ,CAAC;;;;;;;AAOX,EAAE,mBAAmB,IAAI,CAAC,MAAM;;;AAGhC,CAAC;AACD;AAEA,MAAM,sCAAsC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,0BAA0B;IACjD,OAAO;AACT;;;IAvDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApps, type FirebaseApp } from 'firebase/app';\nimport { getAuth, type Auth } from 'firebase/auth';\nimport { getFirestore, type Firestore } from 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDrSCyZX-LRSY3N2wbXKN2wS8YNl4rRtdg\",\n  authDomain: \"joaco-barber.firebaseapp.com\",\n  projectId: \"joaco-barber\",\n  storageBucket: \"joaco-barber.firebasestorage.app\",\n  messagingSenderId: \"787887364483\",\n  appId: \"1:787887364483:web:d0ab6e60f3652cff037eb6\",\n  measurementId: \"G-2166J95XK4\"\n};\n\nlet app: FirebaseApp;\nlet auth: Auth;\nlet firestore: Firestore;\n\nif (!getApps().length) {\n  app = initializeApp(firebaseConfig);\n} else {\n  app = getApps()[0]!;\n}\n\nauth = getAuth(app);\nfirestore = getFirestore(app); // Initialize Firestore\n\nexport { app, auth, firestore };\n"],"names":[],"mappings":";;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;AAEA,MAAM,iBAAiB;IACrB,QAAQ;IACR,YAAY;IACZ,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,OAAO;IACP,eAAe;AACjB;AAEA,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;IACrB,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;AACtB,OAAO;IACL,MAAM,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,GAAG,CAAC,EAAE;AACpB;AAEA,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;AACf,YAAY,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE,MAAM,uBAAuB","debugId":null}},
    {"offset": {"line": 499, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/constants.ts"],"sourcesContent":["// src/lib/constants.ts\nexport const ALL_TIME_SLOTS = [\n  \"09:00 AM\", \"09:30 AM\", \"10:00 AM\", \"10:30 AM\", \"11:00 AM\", \"11:30 AM\",\n  \"12:00 PM\", \"12:30 PM\", \"01:00 PM\", \"01:30 PM\", \"02:00 PM\", \"02:30 PM\",\n  \"03:00 PM\", \"03:30 PM\", \"04:00 PM\", \"04:30 PM\", \"05:00 PM\", \"05:30 PM\",\n  \"06:00 PM\", \"06:30 PM\", \"07:00 PM\"\n];\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;AAChB,MAAM,iBAAiB;IAC5B;IAAY;IAAY;IAAY;IAAY;IAAY;IAC5D;IAAY;IAAY;IAAY;IAAY;IAAY;IAC5D;IAAY;IAAY;IAAY;IAAY;IAAY;IAC5D;IAAY;IAAY;CACzB","debugId":null}},
    {"offset": {"line": 532, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { AppointmentFormValues, SiteSettingsFormValues, StyleAdvisorFormValues, ProductFormValues, ServiceFormValues, AdminEditUserFormValues } from '@/lib/schemas';\nimport { getStyleRecommendationWithServices } from '@/ai/flows/style-recommendation-with-services';\nimport type { Product } from '@/app/products/page';\nimport { revalidatePath } from 'next/cache';\nimport { firestore } from '@/lib/firebase';\nimport { collection, getDocs, addDoc, deleteDoc, doc, Timestamp, updateDoc, getDoc, query, where, orderBy, setDoc } from 'firebase/firestore';\nimport { ALL_TIME_SLOTS } from '@/lib/constants';\nimport { siteConfig } from '@/config/site';\n\n// Firestore collection references\nconst appointmentsCollectionRef = collection(firestore, 'appointments');\nconst productsCollectionRef = collection(firestore, 'products');\nconst usersCollectionRef = collection(firestore, 'users');\nconst servicesCollectionRef = collection(firestore, 'services');\nconst timeSlotSettingsCollectionRef = collection(firestore, 'timeSlotSettings');\nconst messageTemplatesCollectionRef = collection(firestore, 'messageTemplates');\nconst appSettingsCollectionRef = collection(firestore, 'appSettings');\n\n\n// --- User Types ---\nexport type UserDetail = {\n  id: string;\n  fullName: string;\n  email: string;\n  phoneNumber: string;\n  createdAt: string;\n};\n\n\n// --- Appointment Types ---\nexport type Appointment = {\n  id: string;\n  userId: string;\n  userName?: string;\n  userEmail?: string;\n  userPhone?: string;\n  preferredDate: string;\n  preferredTime: string;\n  services: string[];\n  message?: string;\n  status: string;\n  createdAt: string;\n};\n\n// --- Service Type ---\nexport type Service = {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  createdAt?: string;\n};\n\n// --- Time Slot Settings Types ---\nexport type TimeSlotSetting = {\n  time: string;\n  isActive: boolean;\n};\n\n// --- Message Template Type ---\nexport type MessageTemplate = {\n  id: string; // e.g., 'confirmation', 'cancellation'\n  content: string;\n};\n\n\n// --- User Management Actions ---\nexport async function getUsers(): Promise<UserDetail[]> {\n  // console.log(\"Admin: Attempting to fetch users from Firestore...\");\n  try {\n    const q = query(usersCollectionRef, orderBy('createdAt', 'desc'));\n    const querySnapshot = await getDocs(q);\n    // console.log(`Admin: Found ${querySnapshot.docs.length} user documents.`);\n\n    if (querySnapshot.empty) {\n      // console.warn(\"Admin: No users found in the 'users' collection or access denied by Firestore security rules.\");\n      return [];\n    }\n\n    const users = querySnapshot.docs.map(docSnap => {\n      const data = docSnap.data();\n      let createdAtISO: string;\n\n      if (data.createdAt && typeof data.createdAt === 'string') {\n        createdAtISO = data.createdAt;\n      } else if (data.createdAt && typeof data.createdAt.toDate === 'function') {\n        createdAtISO = data.createdAt.toDate().toISOString();\n      } else {\n        // console.warn(`Admin: User ${docSnap.id} has invalid or missing createdAt. Firestore data:`, data.createdAt);\n        createdAtISO = new Date(0).toISOString();\n      }\n\n      const userDetail: UserDetail = {\n        id: docSnap.id,\n        fullName: data.fullName || 'N/A',\n        email: data.email || 'N/A',\n        phoneNumber: data.phoneNumber || 'N/A',\n        createdAt: createdAtISO,\n      };\n      return userDetail;\n    });\n    // console.log(`Admin: Successfully mapped ${users.length} users.`);\n    return users;\n\n  } catch (error: any) {\n    console.error(\"Admin: Error fetching or mapping users from Firestore:\", error);\n    if (error.code === 'failed-precondition') {\n        console.error(\"IMPORTANT: Firestore 'failed-precondition' error for users query. This might mean a composite index is required if you add more complex ordering or filtering. Check Firestore console for index suggestions.\");\n    } else {\n        console.error(\"An unexpected error occurred while fetching users:\", error.message, error.stack);\n    }\n    return [];\n  }\n}\n\nexport async function updateUserDetail(\n  data: { userId: string; fullName: string; phoneNumber: string }\n): Promise<{ success: boolean; message: string }> {\n  console.log(`[updateUserDetail] Called for userId: ${data.userId} with data:`, data);\n  try {\n    const userDocRef = doc(firestore, 'users', data.userId);\n    await updateDoc(userDocRef, {\n      fullName: data.fullName,\n      phoneNumber: data.phoneNumber,\n      // Consider adding an 'updatedAt' timestamp if needed\n      // updatedAt: Timestamp.now(),\n    });\n    console.log(`[updateUserDetail] User ${data.userId} details updated successfully.`);\n    revalidatePath('/admin'); // For admin panel user list\n    return { success: true, message: 'Detalles del usuario actualizados con éxito.' };\n  } catch (error: any) {\n    console.error(`[updateUserDetail] Error updating user ${data.userId} details:`, error);\n    return { success: false, message: `Error al actualizar los detalles del usuario: ${error.message}` };\n  }\n}\n\n\n// --- Appointment Actions ---\nexport async function submitAppointmentRequest(data: AppointmentFormValues) {\n  console.log(\"[submitAppointmentRequest] Received data with userId:\", data.userId);\n  try {\n    const clientPreferredDate = data.preferredDate;\n\n    const normalizedPreferredDateObject = new Date(clientPreferredDate);\n    normalizedPreferredDateObject.setHours(0, 0, 0, 0);\n\n    const preferredDateTimestamp = Timestamp.fromDate(normalizedPreferredDateObject);\n    console.log(\"[submitAppointmentRequest] Normalized preferredDate to Timestamp:\", preferredDateTimestamp.toDate().toISOString());\n\n    const qCheck = query(\n      appointmentsCollectionRef,\n      where('preferredDate', '==', preferredDateTimestamp),\n      where('preferredTime', '==', data.preferredTime),\n      where('status', 'in', ['pending', 'confirmed'])\n    );\n\n    const existingAppointmentsSnap = await getDocs(qCheck);\n    if (!existingAppointmentsSnap.empty) {\n      console.log(\"[submitAppointmentRequest] Double booking detected for\", preferredDateTimestamp.toDate().toISOString(), data.preferredTime);\n      return { success: false, message: 'Este horario ya no está disponible. Por favor, elige otro.' };\n    }\n\n    const appointmentData = {\n      userId: data.userId, // Ensure this is the Firebase User UID\n      preferredDate: preferredDateTimestamp,\n      preferredTime: data.preferredTime,\n      services: data.services,\n      message: data.message || '',\n      status: 'pending',\n      createdAt: Timestamp.now(),\n    };\n    console.log(\"[submitAppointmentRequest] Attempting to add appointment to Firestore with data:\", JSON.stringify(appointmentData));\n    await addDoc(appointmentsCollectionRef, appointmentData);\n    console.log(\"[submitAppointmentRequest] Appointment added successfully with userId:\", data.userId);\n    revalidatePath('/book');\n    revalidatePath('/admin');\n    return { success: true, message: 'Solicitud de cita enviada con éxito. Nos pondremos en contacto contigo pronto para confirmar.' };\n  } catch (error)\n{\n    console.error(\"[submitAppointmentRequest] Error submitting appointment to Firestore:\", error);\n    return { success: false, message: 'Error al enviar la solicitud de cita. Por favor, inténtalo de nuevo.' };\n  }\n}\n\nexport async function getAppointments(): Promise<Appointment[]> {\n  // console.log(\"Admin: Attempting to fetch appointments from Firestore (with orderBy)...\");\n  try {\n    const qAppointments = query(\n      appointmentsCollectionRef,\n      orderBy('preferredDate', 'desc'),\n      orderBy('createdAt', 'desc')\n    );\n    // console.log(\"Admin: Using query with orderBy('preferredDate', 'desc'), orderBy('createdAt', 'desc').\");\n\n    const appointmentSnapshot = await getDocs(qAppointments);\n    // console.log(`Admin: Found ${appointmentSnapshot.docs.length} appointment documents in total.`);\n\n    if (appointmentSnapshot.empty) {\n      // console.warn(\"Admin: No appointments matched the query. This could be due to Firestore security rules or no appointments existing.\");\n      return [];\n    }\n\n    const userIds = [...new Set(appointmentSnapshot.docs.map(docSnap => docSnap.data().userId as string).filter(id => !!id))];\n    let usersMap: Map<string, { fullName?: string; email?: string; phoneNumber?: string }> = new Map();\n\n    if (userIds.length > 0) {\n      const MAX_USER_IDS_PER_QUERY = 30; // Firestore 'in' query limit\n      const userBatches: string[][] = [];\n      for (let i = 0; i < userIds.length; i += MAX_USER_IDS_PER_QUERY) {\n        userBatches.push(userIds.slice(i, i + MAX_USER_IDS_PER_QUERY));\n      }\n\n      for (const batchUserIds of userBatches) {\n        if (batchUserIds.length === 0) continue; // Skip empty batches\n        // Assuming user documents have a 'uid' field that matches the userId from appointments\n        const qUsers = query(collection(firestore, 'users'), where('uid', 'in', batchUserIds));\n        const userSnapshot = await getDocs(qUsers);\n        userSnapshot.docs.forEach(docSnap => {\n          const userData = docSnap.data();\n          usersMap.set(userData.uid, { // Ensure you are mapping by the correct field (e.g. docSnap.id or userData.uid)\n            fullName: userData.fullName,\n            email: userData.email,\n            phoneNumber: userData.phoneNumber\n          });\n        });\n      }\n    }\n    // console.log(`Admin: Fetched details for ${usersMap.size} users.`);\n\n    const appointments = appointmentSnapshot.docs.map(docSnap => {\n      const data = docSnap.data();\n      let preferredDateISO: string;\n      let createdAtISO: string;\n\n      if (data.preferredDate && typeof data.preferredDate.toDate === 'function') {\n        preferredDateISO = data.preferredDate.toDate().toISOString();\n      } else {\n        // console.warn(`Admin: Appointment ${docSnap.id} has invalid or missing preferredDate. Firestore data:`, data.preferredDate);\n        preferredDateISO = new Date(0).toISOString();\n      }\n\n      if (data.createdAt && typeof data.createdAt.toDate === 'function') {\n        createdAtISO = data.createdAt.toDate().toISOString();\n      } else {\n        // console.warn(`Admin: Appointment ${docSnap.id} has invalid or missing createdAt. Firestore data:`, data.createdAt);\n        createdAtISO = new Date(0).toISOString();\n      }\n\n      const userDetails = usersMap.get(data.userId) || {};\n\n      const appointment: Appointment = {\n        id: docSnap.id,\n        userId: data.userId || 'Unknown User',\n        userName: userDetails.fullName || 'Nombre no disponible',\n        userEmail: userDetails.email || 'Email no disponible',\n        userPhone: userDetails.phoneNumber || 'Teléfono no disponible',\n        preferredDate: preferredDateISO,\n        preferredTime: data.preferredTime || 'N/A',\n        services: Array.isArray(data.services) ? data.services : [],\n        message: data.message || '',\n        status: data.status || 'unknown',\n        createdAt: createdAtISO,\n      };\n      return appointment;\n    });\n    // console.log(`Admin: Successfully mapped ${appointments.length} appointments.`);\n    return appointments;\n\n  } catch (error: any) {\n    console.error(\"Admin: Error fetching or mapping appointments from Firestore:\", error);\n     if (error.code === 'failed-precondition') {\n        console.error(\"IMPORTANT: Firestore 'failed-precondition' error for admin appointments query. This OFTEN means a composite index is required for your query (e.g., for orderBy clauses on 'preferredDate' and 'createdAt'). Check the DETAILED error message in the Firebase/Next.js server console. It usually provides a link to create the missing index.\");\n    } else {\n        console.error(\"An unexpected error occurred while fetching admin appointments:\", error.message, error.stack);\n    }\n    return [];\n  }\n}\n\nexport async function getUserAppointments(userId: string): Promise<Appointment[]> {\n  console.log(`[getUserAppointments] Top: Attempting to fetch appointments for user ID: ${userId}`);\n  if (!userId) {\n    console.warn(\"[getUserAppointments] Called with no userId. Returning empty array.\");\n    return [];\n  }\n  try {\n    console.log(`[getUserAppointments] Constructing query for 'appointments', where 'userId' == '${userId}', orderBy 'preferredDate' asc, 'createdAt' desc.`);\n    const qUserAppointments = query(\n      appointmentsCollectionRef,\n      where('userId', '==', userId),\n      orderBy('preferredDate', 'asc'), \n      orderBy('createdAt', 'desc')\n    );\n\n    console.log(`[getUserAppointments] Executing query...`);\n    const appointmentSnapshot = await getDocs(qUserAppointments);\n    console.log(`[getUserAppointments] Query executed. Found ${appointmentSnapshot.docs.length} appointment documents for user ${userId}.`);\n\n    if (appointmentSnapshot.empty) {\n      console.log(`[getUserAppointments] Snapshot is empty. Will try querying without orderBy to check for data/index issues.`);\n      const qSimpleUserAppointments = query(appointmentsCollectionRef, where('userId', '==', userId));\n      const simpleSnapshot = await getDocs(qSimpleUserAppointments);\n      if (simpleSnapshot.empty) {\n        console.log(`[getUserAppointments] Simple query (no orderBy) also found 0 documents for user ${userId}. This suggests no data or userId mismatch.`);\n      } else {\n        console.warn(`[getUserAppointments] SIMPLE query (no orderBy) FOUND ${simpleSnapshot.docs.length} documents for user ${userId}. This STRONGLY SUGGESTS an issue with the COMPOSITE INDEX for 'preferredDate' (asc) and 'createdAt'. Please verify the index in Firestore.`);\n        simpleSnapshot.docs.forEach(docSnap => {\n           console.log(`[getUserAppointments] Raw data from SIMPLE query for doc ${docSnap.id}:`, JSON.stringify(docSnap.data()));\n        });\n      }\n      return [];\n    }\n\n    console.log(`[getUserAppointments] Mapping ${appointmentSnapshot.docs.length} documents...`);\n    const appointmentsPromises = appointmentSnapshot.docs.map(async (docSnap) => {\n      const data = docSnap.data();\n      // console.log(`[getUserAppointments] Raw data for doc ${docSnap.id}:`, JSON.stringify(data));\n\n      let preferredDateISO: string;\n      let createdAtISO: string;\n\n      if (data.preferredDate && typeof data.preferredDate.toDate === 'function') {\n        preferredDateISO = data.preferredDate.toDate().toISOString();\n      } else {\n        console.warn(`[getUserAppointments] Doc ${docSnap.id} has invalid or missing preferredDate. Firestore data:`, data.preferredDate);\n        preferredDateISO = new Date(0).toISOString();\n      }\n\n      if (data.createdAt && typeof data.createdAt.toDate === 'function') {\n        createdAtISO = data.createdAt.toDate().toISOString();\n      } else {\n        console.warn(`[getUserAppointments] Doc ${docSnap.id} has invalid or missing createdAt. Firestore data:`, data.createdAt);\n        createdAtISO = new Date(0).toISOString();\n      }\n\n      const appointment: Appointment = {\n        id: docSnap.id,\n        userId: data.userId,\n        preferredDate: preferredDateISO,\n        preferredTime: data.preferredTime || 'N/A',\n        services: Array.isArray(data.services) ? data.services : [],\n        message: data.message || '',\n        status: data.status || 'unknown',\n        createdAt: createdAtISO,\n      };\n      // console.log(`[getUserAppointments] Mapped appointment ${docSnap.id}:`, JSON.stringify(appointment));\n      return appointment;\n    });\n\n    const appointments = await Promise.all(appointmentsPromises);\n    console.log(`[getUserAppointments] Successfully mapped ${appointments.length} appointments for user ${userId}. Final appointments count: ${appointments.length}`);\n    // console.log(`[getUserAppointments] Final appointments data:`, JSON.stringify(appointments));\n    return appointments;\n\n  } catch (error: any) {\n    console.error(`[getUserAppointments] Error fetching appointments for user ${userId}:`, error.message);\n    if (error.code === 'failed-precondition') {\n      console.error(`[getUserAppointments] Firestore 'failed-precondition' error. A composite index on 'userId' (asc), 'preferredDate' (asc), 'createdAt' (desc) might be required in the 'appointments' collection. Check Firestore console for index suggestions, or the link usually provided in the detailed error message in the Firebase/Next.js server console. Error details: ${error.toString()}`);\n    } else if (error.code === 'permission-denied') {\n      console.error(\"[getUserAppointments] Firestore 'permission-denied' error. Check your Firestore security rules to ensure the authenticated user has read access to their appointments.\");\n    } else {\n      console.error(\"[getUserAppointments] An unexpected error occurred:\", error);\n    }\n    return [];\n  }\n}\n\n\nexport async function updateAppointmentStatus(\n  appointmentId: string,\n  newStatus: 'pending' | 'confirmed' | 'cancelled' | 'completed',\n  currentUserId?: string // Optional: Used for client-side cancellation validation\n) {\n  console.log(`[updateAppointmentStatus] Called for ID: ${appointmentId} to status: ${newStatus}. CurrentUserID: ${currentUserId}`);\n  try {\n    const appointmentDocRef = doc(firestore, 'appointments', appointmentId);\n\n    if (currentUserId && newStatus === 'cancelled') {\n      // This block handles cancellation attempts by a user (not admin)\n      const appointmentSnap = await getDoc(appointmentDocRef);\n      if (!appointmentSnap.exists()) {\n        console.warn(`[updateAppointmentStatus] Appointment ${appointmentId} not found for user cancellation.`);\n        return { success: false, message: 'La cita no fue encontrada.' };\n      }\n      const appointmentData = appointmentSnap.data();\n      if (appointmentData.userId !== currentUserId) {\n        console.warn(`[updateAppointmentStatus] User ${currentUserId} does not own appointment ${appointmentId} (owner: ${appointmentData.userId}).`);\n        return { success: false, message: 'No tienes permiso para cancelar esta cita.' };\n      }\n      // User can cancel 'pending' or 'confirmed' appointments.\n      if (appointmentData.status !== 'pending' && appointmentData.status !== 'confirmed') {\n        console.warn(`[updateAppointmentStatus] Appointment ${appointmentId} is not 'pending' or 'confirmed' (status: ${appointmentData.status}), cannot be cancelled by user.`);\n        return { success: false, message: 'Solo puedes solicitar cancelar citas que estén pendientes o confirmadas. Para otros casos, contacta al administrador.' };\n      }\n      console.log(`[updateAppointmentStatus] User ${currentUserId} is cancelling their own ${appointmentData.status} appointment ${appointmentId}.`);\n    } else if (currentUserId && newStatus !== 'cancelled') {\n      // User trying to do something other than cancel their own appointment\n      console.warn(`[updateAppointmentStatus] User ${currentUserId} attempted to change status to ${newStatus} for appointment ${appointmentId}. Not allowed through this specific user-facing cancel action.`);\n      return { success: false, message: 'No tienes permiso para realizar esta acción.' };\n    }\n    // If no currentUserId, it's an admin action, allow any status change (handled by admin panel logic)\n\n    await updateDoc(appointmentDocRef, { status: newStatus });\n    console.log(`[updateAppointmentStatus] Appointment ${appointmentId} status updated to ${newStatus} in Firestore.`);\n    revalidatePath('/admin'); // For admin panel\n    revalidatePath('/book');  // For user's \"My Appointments\" tab\n    return { success: true, message: `Estado de la cita actualizado a ${newStatus}.` };\n  } catch (error) {\n    console.error(`[updateAppointmentStatus] Error updating appointment ${appointmentId} status in Firestore:`, error);\n    return { success: false, message: 'Error al actualizar el estado de la cita.' };\n  }\n}\n\n\nexport async function getBookedSlotsForDate(date: Date): Promise<string[]> {\n  try {\n    const targetDay = new Date(date);\n    targetDay.setHours(0,0,0,0);\n\n    const q = query(\n      appointmentsCollectionRef,\n      where('preferredDate', '==', Timestamp.fromDate(targetDay)),\n      where('status', 'in', ['pending', 'confirmed'])\n    );\n    const querySnapshot = await getDocs(q);\n    const bookedSlots = querySnapshot.docs.map(docSnap => docSnap.data().preferredTime as string);\n    return bookedSlots;\n  } catch (error) {\n    console.error(\"Error fetching booked slots:\", error);\n    return [];\n  }\n}\n\n\n// --- AI Style Advice Actions ---\nexport async function getAIStyleAdvice(data: StyleAdvisorFormValues) {\n  try {\n    const recommendation = await getStyleRecommendationWithServices({\n      hairType: data.hairType,\n      faceShape: data.faceShape,\n      preferences: data.stylePreferences,\n    });\n    return { success: true, data: recommendation };\n  } catch (error) {\n    console.error('Error getting AI style advice:', error);\n    return { success: false, message: 'Failed to get style advice. Please try again later.' };\n  }\n}\n\n// --- Site Settings Actions ---\nexport async function submitSiteSettings(data: SiteSettingsFormValues) {\n  // console.log('Site Settings Update Received by Server Action:', data);\n  revalidatePath('/admin/settings');\n  revalidatePath('/');\n  return { success: true, message: 'Configuración del sitio procesada. Los cambios en nombre y descripción se reflejarán en breve (puede requerir refrescar la página o reconstrucción).' };\n}\n\n\n// --- Product Management Actions ---\nexport async function getProducts(): Promise<Product[]> {\n  try {\n    const querySnapshot = await getDocs(productsCollectionRef);\n    const products = querySnapshot.docs.map(docSnap => {\n      const data = docSnap.data();\n      let imageSrcVal = 'https://placehold.co/400x400.png';\n      if (typeof data.imageSrc === 'string' && (data.imageSrc.startsWith('http://') || data.imageSrc.startsWith('https://'))) {\n        imageSrcVal = data.imageSrc;\n      } else if (data.imageSrc && data.imageSrc.trim() !== '') {\n        // console.warn(`Product ID ${docSnap.id} has an imageSrc in Firestore that is not a valid http/https URL or is empty: \"${data.imageSrc}\". Defaulting to placeholder.`);\n      } else if (!data.imageSrc) {\n         // console.warn(`Product ID ${docSnap.id} is missing imageSrc in Firestore. Defaulting to placeholder.`);\n      }\n\n      return {\n        id: docSnap.id,\n        name: data.name || 'Unnamed Product',\n        description: data.description || '',\n        price: data.price || 'ARS$ 0',\n        imageSrc: imageSrcVal,\n        aiHint: data.aiHint || '',\n        stock: typeof data.stock === 'number' ? data.stock : 0,\n        createdAt: data.createdAt ? (data.createdAt as Timestamp).toDate().toISOString() : undefined,\n      } as Product;\n    });\n    return products;\n  } catch (error) {\n    console.error(\"Error fetching products from Firestore:\", error);\n    return [];\n  }\n}\n\nexport async function addProduct(data: ProductFormValues) {\n  try {\n    const productDataToAdd = {\n      name: data.name,\n      description: data.description,\n      price: data.price,\n      imageSrc: data.imageSrc,\n      aiHint: data.aiHint,\n      stock: data.stock ?? 0,\n      createdAt: Timestamp.now()\n    };\n    const docRef = await addDoc(productsCollectionRef, productDataToAdd);\n    const newProduct: Product = {\n      id: docRef.id,\n      ...productDataToAdd,\n      createdAt: productDataToAdd.createdAt.toDate().toISOString(),\n    };\n    revalidatePath('/products');\n    revalidatePath('/admin/settings');\n    revalidatePath('/admin');\n    return { success: true, message: 'Producto añadido con éxito a Firestore.', product: newProduct };\n  } catch (error) {\n    console.error(\"Error adding product to Firestore:\", error);\n    return { success: false, message: 'Error al añadir el producto a Firestore. Inténtalo de nuevo.' };\n  }\n}\n\nexport async function updateProduct(data: ProductFormValues) {\n  if (!data.id) {\n    return { success: false, message: 'Product ID is missing for update.' };\n  }\n  try {\n    const productDocRef = doc(firestore, 'products', data.id);\n    const productDataToUpdate = {\n      name: data.name,\n      description: data.description,\n      price: data.price,\n      imageSrc: data.imageSrc,\n      aiHint: data.aiHint,\n      stock: data.stock ?? 0,\n    };\n    await updateDoc(productDocRef, productDataToUpdate);\n    const updatedDocSnap = await getDoc(productDocRef);\n    if (!updatedDocSnap.exists()) {\n        return { success: false, message: 'Failed to retrieve updated product.' };\n    }\n    const updatedData = updatedDocSnap.data();\n    let imageSrcVal = 'https://placehold.co/400x400.png';\n    if (typeof updatedData.imageSrc === 'string' && (updatedData.imageSrc.startsWith('http://') || updatedData.imageSrc.startsWith('https://'))) {\n        imageSrcVal = updatedData.imageSrc;\n    }\n    const updatedProduct: Product = {\n      id: updatedDocSnap.id,\n      name: updatedData.name,\n      description: updatedData.description,\n      price: updatedData.price,\n      imageSrc: imageSrcVal,\n      aiHint: updatedData.aiHint,\n      stock: updatedData.stock,\n      createdAt: updatedData.createdAt ? (updatedData.createdAt as Timestamp).toDate().toISOString() : undefined,\n    };\n    revalidatePath('/products');\n    revalidatePath('/admin/settings');\n    revalidatePath('/admin');\n    return { success: true, message: 'Producto actualizado con éxito.', product: updatedProduct };\n  } catch (error) {\n    console.error(\"Error updating product in Firestore:\", error);\n    return { success: false, message: 'Error al actualizar el producto. Inténtalo de nuevo.' };\n  }\n}\n\nexport async function deleteProduct(productId: string) {\n  try {\n    const productDocRef = doc(firestore, 'products', productId);\n    await deleteDoc(productDocRef);\n    revalidatePath('/products');\n    revalidatePath('/admin/settings');\n    revalidatePath('/admin');\n    return { success: true, message: 'Producto eliminado con éxito de Firestore.' };\n  } catch (error) {\n    console.error(\"Error deleting product from Firestore:\", error);\n    return { success: false, message: 'Error al eliminar el producto de Firestore. Inténtalo de nuevo.' };\n  }\n}\n\n\n// --- Service Management Actions ---\nexport async function getServices(): Promise<Service[]> {\n  try {\n    const q = query(servicesCollectionRef, orderBy('name', 'asc'));\n    const querySnapshot = await getDocs(q);\n    const services = querySnapshot.docs.map(docSnap => {\n      const data = docSnap.data();\n      return {\n        id: docSnap.id,\n        name: data.name || 'Unnamed Service',\n        description: data.description || '',\n        price: data.price || 'ARS$ 0',\n        createdAt: data.createdAt ? (data.createdAt as Timestamp).toDate().toISOString() : undefined,\n      } as Service;\n    });\n    return services;\n  } catch (error) {\n    console.error(\"Error fetching services from Firestore:\", error);\n    return [];\n  }\n}\n\nexport async function addService(data: ServiceFormValues) {\n  try {\n    const serviceDataToAdd = {\n      name: data.name,\n      description: data.description,\n      price: data.price,\n      createdAt: Timestamp.now()\n    };\n    const docRef = await addDoc(servicesCollectionRef, serviceDataToAdd);\n    const newService: Service = {\n      id: docRef.id,\n      ...serviceDataToAdd,\n      createdAt: serviceDataToAdd.createdAt.toDate().toISOString(),\n    };\n    revalidatePath('/admin/settings');\n    revalidatePath('/book');\n    return { success: true, message: 'Servicio añadido con éxito.', service: newService };\n  } catch (error) {\n    console.error(\"Error adding service to Firestore:\", error);\n    return { success: false, message: 'Error al añadir el servicio.' };\n  }\n}\n\nexport async function updateService(data: ServiceFormValues) {\n  if (!data.id) {\n    return { success: false, message: 'Service ID is missing for update.' };\n  }\n  try {\n    const serviceDocRef = doc(firestore, 'services', data.id);\n    const serviceDataToUpdate = {\n      name: data.name,\n      description: data.description,\n      price: data.price,\n    };\n    await updateDoc(serviceDocRef, serviceDataToUpdate);\n\n    const updatedDocSnap = await getDoc(serviceDocRef);\n     if (!updatedDocSnap.exists()) {\n        return { success: false, message: 'Failed to retrieve updated service.' };\n    }\n    const updatedData = updatedDocSnap.data();\n    const updatedService: Service = {\n      id: updatedDocSnap.id,\n      name: updatedData.name,\n      description: updatedData.description,\n      price: updatedData.price,\n      createdAt: updatedData.createdAt ? (updatedData.createdAt as Timestamp).toDate().toISOString() : undefined,\n    };\n\n    revalidatePath('/admin/settings');\n    revalidatePath('/book');\n    return { success: true, message: 'Servicio actualizado con éxito.', service: updatedService };\n  } catch (error) {\n    console.error(\"Error updating service in Firestore:\", error);\n    return { success: false, message: 'Error al actualizar el servicio.' };\n  }\n}\n\nexport async function deleteService(serviceId: string) {\n  try {\n    const serviceDocRef = doc(firestore, 'services', serviceId);\n    await deleteDoc(serviceDocRef);\n    revalidatePath('/admin/settings');\n    revalidatePath('/book');\n    return { success: true, message: 'Servicio eliminado con éxito.' };\n  } catch (error) {\n    console.error(\"Error deleting service from Firestore:\", error);\n    return { success: false, message: 'Error al eliminar el servicio.' };\n  }\n}\n\n// --- Time Slot Settings Actions ---\nexport async function getTimeSlotSettings(): Promise<TimeSlotSetting[]> {\n  try {\n    const snapshot = await getDocs(timeSlotSettingsCollectionRef);\n    const savedSettingsMap = new Map<string, boolean>();\n    snapshot.forEach(docSnap => {\n      savedSettingsMap.set(docSnap.id, docSnap.data().isActive as boolean);\n    });\n\n    const settings = ALL_TIME_SLOTS.map(time => ({\n      time,\n      isActive: savedSettingsMap.get(time) ?? true,\n    }));\n    return settings;\n  } catch (error) {\n    console.error(\"Error fetching time slot settings:\", error);\n    return ALL_TIME_SLOTS.map(time => ({ time, isActive: true }));\n  }\n}\n\nexport async function updateTimeSlotSetting(time: string, isActive: boolean) {\n  try {\n    const settingDocRef = doc(timeSlotSettingsCollectionRef, time);\n    await setDoc(settingDocRef, { time, isActive });\n    revalidatePath('/admin/settings');\n    revalidatePath('/book');\n    return { success: true, message: `Time slot ${time} ${isActive ? 'activated' : 'deactivated'}.` };\n  } catch (error) {\n    console.error(\"Error updating time slot setting:\", error);\n    return { success: false, message: 'Failed to update time slot setting.' };\n  }\n}\n\n// --- WhatsApp Message Template & Admin Contact Actions ---\nconst DEFAULT_CONFIRMATION_TEMPLATE = `Hola {{clientName}}, tu cita en ${siteConfig.name} para el {{appointmentDate}} a las {{appointmentTime}} ha sido CONFIRMADA. Servicios: {{servicesList}}. ¡Te esperamos!`;\nconst DEFAULT_CANCELLATION_TEMPLATE = `Hola {{clientName}}, lamentamos informarte que tu cita en ${siteConfig.name} para el {{appointmentDate}} a las {{appointmentTime}} (Servicios: {{servicesList}}) ha sido CANCELADA. Por favor, contáctanos si deseas reprogramar.`;\nconst DEFAULT_ADMIN_CONTACT_CANCELLATION_TEMPLATE = `Hola ${siteConfig.name}, quisiera solicitar la cancelación de mi cita.\\nCliente: {{clientName}}\\nFecha: {{appointmentDate}}\\nHora: {{appointmentTime}}\\nServicios: {{servicesList}}\\nGracias.`;\nconst DEFAULT_ADMIN_CONTACT_QUERY_TEMPLATE = `Hola ${siteConfig.name}, tengo una consulta sobre mi cita.\\nCliente: {{clientName}}\\nFecha: {{appointmentDate}}\\nHora: {{appointmentTime}}\\nServicios: {{servicesList}}\\nMi consulta es: [ESCRIBE TU CONSULTA AQUÍ]\\nGracias.`;\n\nexport type MessageTemplateId = 'confirmation' | 'cancellation' | 'adminContactCancellationRequest' | 'adminContactQuery';\n\nexport async function getMessageTemplate(templateId: MessageTemplateId): Promise<string> {\n  try {\n    const templateDocRef = doc(messageTemplatesCollectionRef, templateId);\n    const docSnap = await getDoc(templateDocRef);\n    if (docSnap.exists()) {\n      return docSnap.data().content as string;\n    }\n    // Default templates\n    if (templateId === 'confirmation') return DEFAULT_CONFIRMATION_TEMPLATE;\n    if (templateId === 'cancellation') return DEFAULT_CANCELLATION_TEMPLATE;\n    if (templateId === 'adminContactCancellationRequest') return DEFAULT_ADMIN_CONTACT_CANCELLATION_TEMPLATE;\n    if (templateId === 'adminContactQuery') return DEFAULT_ADMIN_CONTACT_QUERY_TEMPLATE;\n    \n    return `Contenido predeterminado para ${templateId} no encontrado.`;\n  } catch (error) {\n    console.error(`Error fetching message template ${templateId}:`, error);\n    if (templateId === 'confirmation') return DEFAULT_CONFIRMATION_TEMPLATE;\n    if (templateId === 'cancellation') return DEFAULT_CANCELLATION_TEMPLATE;\n    if (templateId === 'adminContactCancellationRequest') return DEFAULT_ADMIN_CONTACT_CANCELLATION_TEMPLATE;\n    if (templateId === 'adminContactQuery') return DEFAULT_ADMIN_CONTACT_QUERY_TEMPLATE;\n    return `Error al cargar la plantilla para ${templateId}.`;\n  }\n}\n\nexport async function updateMessageTemplate(templateId: MessageTemplateId, content: string) {\n  try {\n    const templateDocRef = doc(messageTemplatesCollectionRef, templateId);\n    await setDoc(templateDocRef, { content });\n    revalidatePath('/admin/settings');\n    return { success: true, message: `Plantilla de mensaje de ${templateId} actualizada.` };\n  } catch (error) {\n    console.error(`Error updating message template ${templateId}:`, error);\n    return { success: false, message: `Error al actualizar la plantilla de ${templateId}.` };\n  }\n}\n\nexport async function getAdminPhoneNumber(): Promise<string | null> {\n  try {\n    const contactDetailsDocRef = doc(appSettingsCollectionRef, 'contactDetails');\n    const docSnap = await getDoc(contactDetailsDocRef);\n    if (docSnap.exists() && docSnap.data().adminPhoneNumber) {\n      return docSnap.data().adminPhoneNumber as string;\n    }\n    return null; \n  } catch (error) {\n    console.error(\"Error fetching admin phone number:\", error);\n    return null;\n  }\n}\n\nexport async function updateAdminPhoneNumber(phoneNumber: string) {\n  try {\n    const contactDetailsDocRef = doc(appSettingsCollectionRef, 'contactDetails');\n    // Basic cleaning: remove non-digits. Could be more sophisticated.\n    const cleanedPhoneNumber = phoneNumber.replace(/\\D/g, ''); \n    \n    // Basic validation for Argentinian numbers, e.g., must start with 54 and have a certain length.\n    // This is a very simplified validation.\n    if (!cleanedPhoneNumber.startsWith('54') || cleanedPhoneNumber.length < 11 ) { // e.g. 5491123456789 (12 digits) or 542211234567 (11 digits)\n        // Returning a specific message, but ideally the client-side form should handle this.\n        // return { success: false, message: 'El número de teléfono debe ser un número argentino válido (ej: 54911... o 5411...). Asegúrate de incluir el código de país (54) y el de área.' };\n    }\n\n    await setDoc(contactDetailsDocRef, { adminPhoneNumber: phoneNumber }, { merge: true }); // Save the raw number provided by admin\n    revalidatePath('/admin/settings');\n    return { success: true, message: 'Número de teléfono del administrador actualizado.' };\n  } catch (error) {\n    console.error(\"Error updating admin phone number:\", error);\n    return { success: false, message: 'Error al actualizar el número de teléfono del administrador.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAEA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;AAEA,kCAAkC;AAClC,MAAM,4BAA4B,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE;AACxD,MAAM,wBAAwB,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE;AACpD,MAAM,qBAAqB,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE;AACjD,MAAM,wBAAwB,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE;AACpD,MAAM,gCAAgC,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE;AAC5D,MAAM,gCAAgC,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE;AAC5D,MAAM,2BAA2B,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE;AAmDhD,eAAe,uCAAM,GAAN;IACpB,qEAAqE;IACrE,IAAI;QACF,MAAM,IAAI,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,oBAAoB,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE,aAAa;QACzD,MAAM,gBAAgB,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE;QACpC,4EAA4E;QAE5E,IAAI,cAAc,KAAK,EAAE;YACvB,iHAAiH;YACjH,OAAO,EAAE;QACX;QAEA,MAAM,QAAQ,cAAc,IAAI,CAAC,GAAG,CAAC,CAAA;YACnC,MAAM,OAAO,QAAQ,IAAI;YACzB,IAAI;YAEJ,IAAI,KAAK,SAAS,IAAI,OAAO,KAAK,SAAS,KAAK,UAAU;gBACxD,eAAe,KAAK,SAAS;YAC/B,OAAO,IAAI,KAAK,SAAS,IAAI,OAAO,KAAK,SAAS,CAAC,MAAM,KAAK,YAAY;gBACxE,eAAe,KAAK,SAAS,CAAC,MAAM,GAAG,WAAW;YACpD,OAAO;gBACL,+GAA+G;gBAC/G,eAAe,IAAI,KAAK,GAAG,WAAW;YACxC;YAEA,MAAM,aAAyB;gBAC7B,IAAI,QAAQ,EAAE;gBACd,UAAU,KAAK,QAAQ,IAAI;gBAC3B,OAAO,KAAK,KAAK,IAAI;gBACrB,aAAa,KAAK,WAAW,IAAI;gBACjC,WAAW;YACb;YACA,OAAO;QACT;QACA,oEAAoE;QACpE,OAAO;IAET,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,0DAA0D;QACxE,IAAI,MAAM,IAAI,KAAK,uBAAuB;YACtC,QAAQ,KAAK,CAAC;QAClB,OAAO;YACH,QAAQ,KAAK,CAAC,sDAAsD,MAAM,OAAO,EAAE,MAAM,KAAK;QAClG;QACA,OAAO,EAAE;IACX;AACF;AAEO,eAAe,uCAAc,GAAd,iBACpB,IAA+D;IAE/D,QAAQ,GAAG,CAAC,CAAC,sCAAsC,EAAE,KAAK,MAAM,CAAC,WAAW,CAAC,EAAE;IAC/E,IAAI;QACF,MAAM,aAAa,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE,SAAS,KAAK,MAAM;QACtD,MAAM,CAAA,GAAA,iKAAA,CAAA,YAAS,AAAD,EAAE,YAAY;YAC1B,UAAU,KAAK,QAAQ;YACvB,aAAa,KAAK,WAAW;QAG/B;QACA,QAAQ,GAAG,CAAC,CAAC,wBAAwB,EAAE,KAAK,MAAM,CAAC,8BAA8B,CAAC;QAClF,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE,WAAW,4BAA4B;QACtD,OAAO;YAAE,SAAS;YAAM,SAAS;QAA+C;IAClF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,uCAAuC,EAAE,KAAK,MAAM,CAAC,SAAS,CAAC,EAAE;QAChF,OAAO;YAAE,SAAS;YAAO,SAAS,CAAC,8CAA8C,EAAE,MAAM,OAAO,EAAE;QAAC;IACrG;AACF;AAIO,eAAe,uCAAsB,GAAtB,yBAAyB,IAA2B;IACxE,QAAQ,GAAG,CAAC,yDAAyD,KAAK,MAAM;IAChF,IAAI;QACF,MAAM,sBAAsB,KAAK,aAAa;QAE9C,MAAM,gCAAgC,IAAI,KAAK;QAC/C,8BAA8B,QAAQ,CAAC,GAAG,GAAG,GAAG;QAEhD,MAAM,yBAAyB,iKAAA,CAAA,YAAS,CAAC,QAAQ,CAAC;QAClD,QAAQ,GAAG,CAAC,qEAAqE,uBAAuB,MAAM,GAAG,WAAW;QAE5H,MAAM,SAAS,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EACjB,2BACA,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,iBAAiB,MAAM,yBAC7B,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,iBAAiB,MAAM,KAAK,aAAa,GAC/C,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,UAAU,MAAM;YAAC;YAAW;SAAY;QAGhD,MAAM,2BAA2B,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE;QAC/C,IAAI,CAAC,yBAAyB,KAAK,EAAE;YACnC,QAAQ,GAAG,CAAC,0DAA0D,uBAAuB,MAAM,GAAG,WAAW,IAAI,KAAK,aAAa;YACvI,OAAO;gBAAE,SAAS;gBAAO,SAAS;YAA6D;QACjG;QAEA,MAAM,kBAAkB;YACtB,QAAQ,KAAK,MAAM;YACnB,eAAe;YACf,eAAe,KAAK,aAAa;YACjC,UAAU,KAAK,QAAQ;YACvB,SAAS,KAAK,OAAO,IAAI;YACzB,QAAQ;YACR,WAAW,iKAAA,CAAA,YAAS,CAAC,GAAG;QAC1B;QACA,QAAQ,GAAG,CAAC,oFAAoF,KAAK,SAAS,CAAC;QAC/G,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,2BAA2B;QACxC,QAAQ,GAAG,CAAC,0EAA0E,KAAK,MAAM;QACjG,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,SAAS;YAAM,SAAS;QAAgG;IACnI,EAAE,OAAO,OACX;QACI,QAAQ,KAAK,CAAC,yEAAyE;QACvF,OAAO;YAAE,SAAS;YAAO,SAAS;QAAuE;IAC3G;AACF;AAEO,eAAe,uCAAa,GAAb;IACpB,2FAA2F;IAC3F,IAAI;QACF,MAAM,gBAAgB,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EACxB,2BACA,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE,iBAAiB,SACzB,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE,aAAa;QAEvB,0GAA0G;QAE1G,MAAM,sBAAsB,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE;QAC1C,kGAAkG;QAElG,IAAI,oBAAoB,KAAK,EAAE;YAC7B,wIAAwI;YACxI,OAAO,EAAE;QACX;QAEA,MAAM,UAAU;eAAI,IAAI,IAAI,oBAAoB,IAAI,CAAC,GAAG,CAAC,CAAA,UAAW,QAAQ,IAAI,GAAG,MAAM,EAAY,MAAM,CAAC,CAAA,KAAM,CAAC,CAAC;SAAK;QACzH,IAAI,WAAqF,IAAI;QAE7F,IAAI,QAAQ,MAAM,GAAG,GAAG;YACtB,MAAM,yBAAyB,IAAI,6BAA6B;YAChE,MAAM,cAA0B,EAAE;YAClC,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,MAAM,EAAE,KAAK,uBAAwB;gBAC/D,YAAY,IAAI,CAAC,QAAQ,KAAK,CAAC,GAAG,IAAI;YACxC;YAEA,KAAK,MAAM,gBAAgB,YAAa;gBACtC,IAAI,aAAa,MAAM,KAAK,GAAG,UAAU,qBAAqB;gBAC9D,uFAAuF;gBACvF,MAAM,SAAS,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,CAAA,GAAA,iKAAA,CAAA,aAAU,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE,UAAU,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,OAAO,MAAM;gBACxE,MAAM,eAAe,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE;gBACnC,aAAa,IAAI,CAAC,OAAO,CAAC,CAAA;oBACxB,MAAM,WAAW,QAAQ,IAAI;oBAC7B,SAAS,GAAG,CAAC,SAAS,GAAG,EAAE;wBACzB,UAAU,SAAS,QAAQ;wBAC3B,OAAO,SAAS,KAAK;wBACrB,aAAa,SAAS,WAAW;oBACnC;gBACF;YACF;QACF;QACA,qEAAqE;QAErE,MAAM,eAAe,oBAAoB,IAAI,CAAC,GAAG,CAAC,CAAA;YAChD,MAAM,OAAO,QAAQ,IAAI;YACzB,IAAI;YACJ,IAAI;YAEJ,IAAI,KAAK,aAAa,IAAI,OAAO,KAAK,aAAa,CAAC,MAAM,KAAK,YAAY;gBACzE,mBAAmB,KAAK,aAAa,CAAC,MAAM,GAAG,WAAW;YAC5D,OAAO;gBACL,8HAA8H;gBAC9H,mBAAmB,IAAI,KAAK,GAAG,WAAW;YAC5C;YAEA,IAAI,KAAK,SAAS,IAAI,OAAO,KAAK,SAAS,CAAC,MAAM,KAAK,YAAY;gBACjE,eAAe,KAAK,SAAS,CAAC,MAAM,GAAG,WAAW;YACpD,OAAO;gBACL,sHAAsH;gBACtH,eAAe,IAAI,KAAK,GAAG,WAAW;YACxC;YAEA,MAAM,cAAc,SAAS,GAAG,CAAC,KAAK,MAAM,KAAK,CAAC;YAElD,MAAM,cAA2B;gBAC/B,IAAI,QAAQ,EAAE;gBACd,QAAQ,KAAK,MAAM,IAAI;gBACvB,UAAU,YAAY,QAAQ,IAAI;gBAClC,WAAW,YAAY,KAAK,IAAI;gBAChC,WAAW,YAAY,WAAW,IAAI;gBACtC,eAAe;gBACf,eAAe,KAAK,aAAa,IAAI;gBACrC,UAAU,MAAM,OAAO,CAAC,KAAK,QAAQ,IAAI,KAAK,QAAQ,GAAG,EAAE;gBAC3D,SAAS,KAAK,OAAO,IAAI;gBACzB,QAAQ,KAAK,MAAM,IAAI;gBACvB,WAAW;YACb;YACA,OAAO;QACT;QACA,kFAAkF;QAClF,OAAO;IAET,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,iEAAiE;QAC9E,IAAI,MAAM,IAAI,KAAK,uBAAuB;YACvC,QAAQ,KAAK,CAAC;QAClB,OAAO;YACH,QAAQ,KAAK,CAAC,mEAAmE,MAAM,OAAO,EAAE,MAAM,KAAK;QAC/G;QACA,OAAO,EAAE;IACX;AACF;AAEO,eAAe,uCAAiB,GAAjB,oBAAoB,MAAc;IACtD,QAAQ,GAAG,CAAC,CAAC,yEAAyE,EAAE,QAAQ;IAChG,IAAI,CAAC,QAAQ;QACX,QAAQ,IAAI,CAAC;QACb,OAAO,EAAE;IACX;IACA,IAAI;QACF,QAAQ,GAAG,CAAC,CAAC,gFAAgF,EAAE,OAAO,iDAAiD,CAAC;QACxJ,MAAM,oBAAoB,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAC5B,2BACA,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,UAAU,MAAM,SACtB,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE,iBAAiB,QACzB,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE,aAAa;QAGvB,QAAQ,GAAG,CAAC,CAAC,wCAAwC,CAAC;QACtD,MAAM,sBAAsB,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE;QAC1C,QAAQ,GAAG,CAAC,CAAC,4CAA4C,EAAE,oBAAoB,IAAI,CAAC,MAAM,CAAC,gCAAgC,EAAE,OAAO,CAAC,CAAC;QAEtI,IAAI,oBAAoB,KAAK,EAAE;YAC7B,QAAQ,GAAG,CAAC,CAAC,0GAA0G,CAAC;YACxH,MAAM,0BAA0B,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,2BAA2B,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,UAAU,MAAM;YACvF,MAAM,iBAAiB,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE;YACrC,IAAI,eAAe,KAAK,EAAE;gBACxB,QAAQ,GAAG,CAAC,CAAC,gFAAgF,EAAE,OAAO,2CAA2C,CAAC;YACpJ,OAAO;gBACL,QAAQ,IAAI,CAAC,CAAC,sDAAsD,EAAE,eAAe,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,OAAO,2IAA2I,CAAC;gBAC1Q,eAAe,IAAI,CAAC,OAAO,CAAC,CAAA;oBACzB,QAAQ,GAAG,CAAC,CAAC,yDAAyD,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,SAAS,CAAC,QAAQ,IAAI;gBACrH;YACF;YACA,OAAO,EAAE;QACX;QAEA,QAAQ,GAAG,CAAC,CAAC,8BAA8B,EAAE,oBAAoB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;QAC3F,MAAM,uBAAuB,oBAAoB,IAAI,CAAC,GAAG,CAAC,OAAO;YAC/D,MAAM,OAAO,QAAQ,IAAI;YACzB,8FAA8F;YAE9F,IAAI;YACJ,IAAI;YAEJ,IAAI,KAAK,aAAa,IAAI,OAAO,KAAK,aAAa,CAAC,MAAM,KAAK,YAAY;gBACzE,mBAAmB,KAAK,aAAa,CAAC,MAAM,GAAG,WAAW;YAC5D,OAAO;gBACL,QAAQ,IAAI,CAAC,CAAC,0BAA0B,EAAE,QAAQ,EAAE,CAAC,sDAAsD,CAAC,EAAE,KAAK,aAAa;gBAChI,mBAAmB,IAAI,KAAK,GAAG,WAAW;YAC5C;YAEA,IAAI,KAAK,SAAS,IAAI,OAAO,KAAK,SAAS,CAAC,MAAM,KAAK,YAAY;gBACjE,eAAe,KAAK,SAAS,CAAC,MAAM,GAAG,WAAW;YACpD,OAAO;gBACL,QAAQ,IAAI,CAAC,CAAC,0BAA0B,EAAE,QAAQ,EAAE,CAAC,kDAAkD,CAAC,EAAE,KAAK,SAAS;gBACxH,eAAe,IAAI,KAAK,GAAG,WAAW;YACxC;YAEA,MAAM,cAA2B;gBAC/B,IAAI,QAAQ,EAAE;gBACd,QAAQ,KAAK,MAAM;gBACnB,eAAe;gBACf,eAAe,KAAK,aAAa,IAAI;gBACrC,UAAU,MAAM,OAAO,CAAC,KAAK,QAAQ,IAAI,KAAK,QAAQ,GAAG,EAAE;gBAC3D,SAAS,KAAK,OAAO,IAAI;gBACzB,QAAQ,KAAK,MAAM,IAAI;gBACvB,WAAW;YACb;YACA,uGAAuG;YACvG,OAAO;QACT;QAEA,MAAM,eAAe,MAAM,QAAQ,GAAG,CAAC;QACvC,QAAQ,GAAG,CAAC,CAAC,0CAA0C,EAAE,aAAa,MAAM,CAAC,uBAAuB,EAAE,OAAO,4BAA4B,EAAE,aAAa,MAAM,EAAE;QAChK,+FAA+F;QAC/F,OAAO;IAET,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,2DAA2D,EAAE,OAAO,CAAC,CAAC,EAAE,MAAM,OAAO;QACpG,IAAI,MAAM,IAAI,KAAK,uBAAuB;YACxC,QAAQ,KAAK,CAAC,CAAC,iWAAiW,EAAE,MAAM,QAAQ,IAAI;QACtY,OAAO,IAAI,MAAM,IAAI,KAAK,qBAAqB;YAC7C,QAAQ,KAAK,CAAC;QAChB,OAAO;YACL,QAAQ,KAAK,CAAC,uDAAuD;QACvE;QACA,OAAO,EAAE;IACX;AACF;AAGO,eAAe,uCAAqB,GAArB,wBACpB,aAAqB,EACrB,SAA8D,EAC9D,aAAsB,AAAC,yDAAyD;;IAEhF,QAAQ,GAAG,CAAC,CAAC,yCAAyC,EAAE,cAAc,YAAY,EAAE,UAAU,iBAAiB,EAAE,eAAe;IAChI,IAAI;QACF,MAAM,oBAAoB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE,gBAAgB;QAEzD,IAAI,iBAAiB,cAAc,aAAa;YAC9C,iEAAiE;YACjE,MAAM,kBAAkB,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE;YACrC,IAAI,CAAC,gBAAgB,MAAM,IAAI;gBAC7B,QAAQ,IAAI,CAAC,CAAC,sCAAsC,EAAE,cAAc,iCAAiC,CAAC;gBACtG,OAAO;oBAAE,SAAS;oBAAO,SAAS;gBAA6B;YACjE;YACA,MAAM,kBAAkB,gBAAgB,IAAI;YAC5C,IAAI,gBAAgB,MAAM,KAAK,eAAe;gBAC5C,QAAQ,IAAI,CAAC,CAAC,+BAA+B,EAAE,cAAc,0BAA0B,EAAE,cAAc,SAAS,EAAE,gBAAgB,MAAM,CAAC,EAAE,CAAC;gBAC5I,OAAO;oBAAE,SAAS;oBAAO,SAAS;gBAA6C;YACjF;YACA,yDAAyD;YACzD,IAAI,gBAAgB,MAAM,KAAK,aAAa,gBAAgB,MAAM,KAAK,aAAa;gBAClF,QAAQ,IAAI,CAAC,CAAC,sCAAsC,EAAE,cAAc,0CAA0C,EAAE,gBAAgB,MAAM,CAAC,+BAA+B,CAAC;gBACvK,OAAO;oBAAE,SAAS;oBAAO,SAAS;gBAAwH;YAC5J;YACA,QAAQ,GAAG,CAAC,CAAC,+BAA+B,EAAE,cAAc,yBAAyB,EAAE,gBAAgB,MAAM,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;QAC/I,OAAO,IAAI,iBAAiB,cAAc,aAAa;YACrD,sEAAsE;YACtE,QAAQ,IAAI,CAAC,CAAC,+BAA+B,EAAE,cAAc,+BAA+B,EAAE,UAAU,iBAAiB,EAAE,cAAc,8DAA8D,CAAC;YACxM,OAAO;gBAAE,SAAS;gBAAO,SAAS;YAA+C;QACnF;QACA,oGAAoG;QAEpG,MAAM,CAAA,GAAA,iKAAA,CAAA,YAAS,AAAD,EAAE,mBAAmB;YAAE,QAAQ;QAAU;QACvD,QAAQ,GAAG,CAAC,CAAC,sCAAsC,EAAE,cAAc,mBAAmB,EAAE,UAAU,cAAc,CAAC;QACjH,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE,WAAW,kBAAkB;QAC5C,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE,UAAW,mCAAmC;QAC7D,OAAO;YAAE,SAAS;YAAM,SAAS,CAAC,gCAAgC,EAAE,UAAU,CAAC,CAAC;QAAC;IACnF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,qDAAqD,EAAE,cAAc,qBAAqB,CAAC,EAAE;QAC5G,OAAO;YAAE,SAAS;YAAO,SAAS;QAA4C;IAChF;AACF;AAGO,eAAe,uCAAmB,GAAnB,sBAAsB,IAAU;IACpD,IAAI;QACF,MAAM,YAAY,IAAI,KAAK;QAC3B,UAAU,QAAQ,CAAC,GAAE,GAAE,GAAE;QAEzB,MAAM,IAAI,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EACZ,2BACA,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,iBAAiB,MAAM,iKAAA,CAAA,YAAS,CAAC,QAAQ,CAAC,aAChD,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,UAAU,MAAM;YAAC;YAAW;SAAY;QAEhD,MAAM,gBAAgB,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE;QACpC,MAAM,cAAc,cAAc,IAAI,CAAC,GAAG,CAAC,CAAA,UAAW,QAAQ,IAAI,GAAG,aAAa;QAClF,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,EAAE;IACX;AACF;AAIO,eAAe,uCAAc,GAAd,iBAAiB,IAA4B;IACjE,IAAI;QACF,MAAM,iBAAiB,MAAM,CAAA,GAAA,iKAAA,CAAA,qCAAkC,AAAD,EAAE;YAC9D,UAAU,KAAK,QAAQ;YACvB,WAAW,KAAK,SAAS;YACzB,aAAa,KAAK,gBAAgB;QACpC;QACA,OAAO;YAAE,SAAS;YAAM,MAAM;QAAe;IAC/C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO;YAAE,SAAS;YAAO,SAAS;QAAsD;IAC1F;AACF;AAGO,eAAe,uCAAgB,GAAhB,mBAAmB,IAA4B;IACnE,wEAAwE;IACxE,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,OAAO;QAAE,SAAS;QAAM,SAAS;IAAuJ;AAC1L;AAIO,eAAe,uCAAS,GAAT;IACpB,IAAI;QACF,MAAM,gBAAgB,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE;QACpC,MAAM,WAAW,cAAc,IAAI,CAAC,GAAG,CAAC,CAAA;YACtC,MAAM,OAAO,QAAQ,IAAI;YACzB,IAAI,cAAc;YAClB,IAAI,OAAO,KAAK,QAAQ,KAAK,YAAY,CAAC,KAAK,QAAQ,CAAC,UAAU,CAAC,cAAc,KAAK,QAAQ,CAAC,UAAU,CAAC,WAAW,GAAG;gBACtH,cAAc,KAAK,QAAQ;YAC7B,OAAO,IAAI,KAAK,QAAQ,IAAI,KAAK,QAAQ,CAAC,IAAI,OAAO,IAAI;YACvD,wKAAwK;YAC1K,OAAO,IAAI,CAAC,KAAK,QAAQ,EAAE;YACxB,yGAAyG;YAC5G;YAEA,OAAO;gBACL,IAAI,QAAQ,EAAE;gBACd,MAAM,KAAK,IAAI,IAAI;gBACnB,aAAa,KAAK,WAAW,IAAI;gBACjC,OAAO,KAAK,KAAK,IAAI;gBACrB,UAAU;gBACV,QAAQ,KAAK,MAAM,IAAI;gBACvB,OAAO,OAAO,KAAK,KAAK,KAAK,WAAW,KAAK,KAAK,GAAG;gBACrD,WAAW,KAAK,SAAS,GAAG,AAAC,KAAK,SAAS,CAAe,MAAM,GAAG,WAAW,KAAK;YACrF;QACF;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2CAA2C;QACzD,OAAO,EAAE;IACX;AACF;AAEO,eAAe,uCAAQ,GAAR,WAAW,IAAuB;IACtD,IAAI;QACF,MAAM,mBAAmB;YACvB,MAAM,KAAK,IAAI;YACf,aAAa,KAAK,WAAW;YAC7B,OAAO,KAAK,KAAK;YACjB,UAAU,KAAK,QAAQ;YACvB,QAAQ,KAAK,MAAM;YACnB,OAAO,KAAK,KAAK,IAAI;YACrB,WAAW,iKAAA,CAAA,YAAS,CAAC,GAAG;QAC1B;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,uBAAuB;QACnD,MAAM,aAAsB;YAC1B,IAAI,OAAO,EAAE;YACb,GAAG,gBAAgB;YACnB,WAAW,iBAAiB,SAAS,CAAC,MAAM,GAAG,WAAW;QAC5D;QACA,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,SAAS;YAAM,SAAS;YAA2C,SAAS;QAAW;IAClG,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO;YAAE,SAAS;YAAO,SAAS;QAA+D;IACnG;AACF;AAEO,eAAe,uCAAW,GAAX,cAAc,IAAuB;IACzD,IAAI,CAAC,KAAK,EAAE,EAAE;QACZ,OAAO;YAAE,SAAS;YAAO,SAAS;QAAoC;IACxE;IACA,IAAI;QACF,MAAM,gBAAgB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE,YAAY,KAAK,EAAE;QACxD,MAAM,sBAAsB;YAC1B,MAAM,KAAK,IAAI;YACf,aAAa,KAAK,WAAW;YAC7B,OAAO,KAAK,KAAK;YACjB,UAAU,KAAK,QAAQ;YACvB,QAAQ,KAAK,MAAM;YACnB,OAAO,KAAK,KAAK,IAAI;QACvB;QACA,MAAM,CAAA,GAAA,iKAAA,CAAA,YAAS,AAAD,EAAE,eAAe;QAC/B,MAAM,iBAAiB,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE;QACpC,IAAI,CAAC,eAAe,MAAM,IAAI;YAC1B,OAAO;gBAAE,SAAS;gBAAO,SAAS;YAAsC;QAC5E;QACA,MAAM,cAAc,eAAe,IAAI;QACvC,IAAI,cAAc;QAClB,IAAI,OAAO,YAAY,QAAQ,KAAK,YAAY,CAAC,YAAY,QAAQ,CAAC,UAAU,CAAC,cAAc,YAAY,QAAQ,CAAC,UAAU,CAAC,WAAW,GAAG;YACzI,cAAc,YAAY,QAAQ;QACtC;QACA,MAAM,iBAA0B;YAC9B,IAAI,eAAe,EAAE;YACrB,MAAM,YAAY,IAAI;YACtB,aAAa,YAAY,WAAW;YACpC,OAAO,YAAY,KAAK;YACxB,UAAU;YACV,QAAQ,YAAY,MAAM;YAC1B,OAAO,YAAY,KAAK;YACxB,WAAW,YAAY,SAAS,GAAG,AAAC,YAAY,SAAS,CAAe,MAAM,GAAG,WAAW,KAAK;QACnG;QACA,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,SAAS;YAAM,SAAS;YAAmC,SAAS;QAAe;IAC9F,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO;YAAE,SAAS;YAAO,SAAS;QAAuD;IAC3F;AACF;AAEO,eAAe,uCAAW,GAAX,cAAc,SAAiB;IACnD,IAAI;QACF,MAAM,gBAAgB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE,YAAY;QACjD,MAAM,CAAA,GAAA,iKAAA,CAAA,YAAS,AAAD,EAAE;QAChB,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,SAAS;YAAM,SAAS;QAA6C;IAChF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0CAA0C;QACxD,OAAO;YAAE,SAAS;YAAO,SAAS;QAAkE;IACtG;AACF;AAIO,eAAe,uCAAS,GAAT;IACpB,IAAI;QACF,MAAM,IAAI,CAAA,GAAA,iKAAA,CAAA,QAAK,AAAD,EAAE,uBAAuB,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;QACvD,MAAM,gBAAgB,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE;QACpC,MAAM,WAAW,cAAc,IAAI,CAAC,GAAG,CAAC,CAAA;YACtC,MAAM,OAAO,QAAQ,IAAI;YACzB,OAAO;gBACL,IAAI,QAAQ,EAAE;gBACd,MAAM,KAAK,IAAI,IAAI;gBACnB,aAAa,KAAK,WAAW,IAAI;gBACjC,OAAO,KAAK,KAAK,IAAI;gBACrB,WAAW,KAAK,SAAS,GAAG,AAAC,KAAK,SAAS,CAAe,MAAM,GAAG,WAAW,KAAK;YACrF;QACF;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2CAA2C;QACzD,OAAO,EAAE;IACX;AACF;AAEO,eAAe,uCAAQ,GAAR,WAAW,IAAuB;IACtD,IAAI;QACF,MAAM,mBAAmB;YACvB,MAAM,KAAK,IAAI;YACf,aAAa,KAAK,WAAW;YAC7B,OAAO,KAAK,KAAK;YACjB,WAAW,iKAAA,CAAA,YAAS,CAAC,GAAG;QAC1B;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,uBAAuB;QACnD,MAAM,aAAsB;YAC1B,IAAI,OAAO,EAAE;YACb,GAAG,gBAAgB;YACnB,WAAW,iBAAiB,SAAS,CAAC,MAAM,GAAG,WAAW;QAC5D;QACA,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,SAAS;YAAM,SAAS;YAA+B,SAAS;QAAW;IACtF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO;YAAE,SAAS;YAAO,SAAS;QAA+B;IACnE;AACF;AAEO,eAAe,uCAAW,GAAX,cAAc,IAAuB;IACzD,IAAI,CAAC,KAAK,EAAE,EAAE;QACZ,OAAO;YAAE,SAAS;YAAO,SAAS;QAAoC;IACxE;IACA,IAAI;QACF,MAAM,gBAAgB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE,YAAY,KAAK,EAAE;QACxD,MAAM,sBAAsB;YAC1B,MAAM,KAAK,IAAI;YACf,aAAa,KAAK,WAAW;YAC7B,OAAO,KAAK,KAAK;QACnB;QACA,MAAM,CAAA,GAAA,iKAAA,CAAA,YAAS,AAAD,EAAE,eAAe;QAE/B,MAAM,iBAAiB,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE;QACnC,IAAI,CAAC,eAAe,MAAM,IAAI;YAC3B,OAAO;gBAAE,SAAS;gBAAO,SAAS;YAAsC;QAC5E;QACA,MAAM,cAAc,eAAe,IAAI;QACvC,MAAM,iBAA0B;YAC9B,IAAI,eAAe,EAAE;YACrB,MAAM,YAAY,IAAI;YACtB,aAAa,YAAY,WAAW;YACpC,OAAO,YAAY,KAAK;YACxB,WAAW,YAAY,SAAS,GAAG,AAAC,YAAY,SAAS,CAAe,MAAM,GAAG,WAAW,KAAK;QACnG;QAEA,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,SAAS;YAAM,SAAS;YAAmC,SAAS;QAAe;IAC9F,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO;YAAE,SAAS;YAAO,SAAS;QAAmC;IACvE;AACF;AAEO,eAAe,uCAAW,GAAX,cAAc,SAAiB;IACnD,IAAI;QACF,MAAM,gBAAgB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,sHAAA,CAAA,YAAS,EAAE,YAAY;QACjD,MAAM,CAAA,GAAA,iKAAA,CAAA,YAAS,AAAD,EAAE;QAChB,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,SAAS;YAAM,SAAS;QAAgC;IACnE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0CAA0C;QACxD,OAAO;YAAE,SAAS;YAAO,SAAS;QAAiC;IACrE;AACF;AAGO,eAAe,uCAAiB,GAAjB;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAE;QAC/B,MAAM,mBAAmB,IAAI;QAC7B,SAAS,OAAO,CAAC,CAAA;YACf,iBAAiB,GAAG,CAAC,QAAQ,EAAE,EAAE,QAAQ,IAAI,GAAG,QAAQ;QAC1D;QAEA,MAAM,WAAW,uHAAA,CAAA,iBAAc,CAAC,GAAG,CAAC,CAAA,OAAQ,CAAC;gBAC3C;gBACA,UAAU,iBAAiB,GAAG,CAAC,SAAS;YAC1C,CAAC;QACD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO,uHAAA,CAAA,iBAAc,CAAC,GAAG,CAAC,CAAA,OAAQ,CAAC;gBAAE;gBAAM,UAAU;YAAK,CAAC;IAC7D;AACF;AAEO,eAAe,uCAAmB,GAAnB,sBAAsB,IAAY,EAAE,QAAiB;IACzE,IAAI;QACF,MAAM,gBAAgB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,+BAA+B;QACzD,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,eAAe;YAAE;YAAM;QAAS;QAC7C,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,SAAS;YAAM,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE,WAAW,cAAc,cAAc,CAAC,CAAC;QAAC;IAClG,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO;YAAE,SAAS;YAAO,SAAS;QAAsC;IAC1E;AACF;AAEA,4DAA4D;AAC5D,MAAM,gCAAgC,CAAC,gCAAgC,EAAE,qHAAA,CAAA,aAAU,CAAC,IAAI,CAAC,sHAAsH,CAAC;AAChN,MAAM,gCAAgC,CAAC,0DAA0D,EAAE,qHAAA,CAAA,aAAU,CAAC,IAAI,CAAC,qJAAqJ,CAAC;AACzQ,MAAM,8CAA8C,CAAC,KAAK,EAAE,qHAAA,CAAA,aAAU,CAAC,IAAI,CAAC,sKAAsK,CAAC;AACnP,MAAM,uCAAuC,CAAC,KAAK,EAAE,qHAAA,CAAA,aAAU,CAAC,IAAI,CAAC,sMAAsM,CAAC;AAIrQ,eAAe,uCAAgB,GAAhB,mBAAmB,UAA6B;IACpE,IAAI;QACF,MAAM,iBAAiB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,+BAA+B;QAC1D,MAAM,UAAU,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE;QAC7B,IAAI,QAAQ,MAAM,IAAI;YACpB,OAAO,QAAQ,IAAI,GAAG,OAAO;QAC/B;QACA,oBAAoB;QACpB,IAAI,eAAe,gBAAgB,OAAO;QAC1C,IAAI,eAAe,gBAAgB,OAAO;QAC1C,IAAI,eAAe,mCAAmC,OAAO;QAC7D,IAAI,eAAe,qBAAqB,OAAO;QAE/C,OAAO,CAAC,8BAA8B,EAAE,WAAW,eAAe,CAAC;IACrE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,gCAAgC,EAAE,WAAW,CAAC,CAAC,EAAE;QAChE,IAAI,eAAe,gBAAgB,OAAO;QAC1C,IAAI,eAAe,gBAAgB,OAAO;QAC1C,IAAI,eAAe,mCAAmC,OAAO;QAC7D,IAAI,eAAe,qBAAqB,OAAO;QAC/C,OAAO,CAAC,kCAAkC,EAAE,WAAW,CAAC,CAAC;IAC3D;AACF;AAEO,eAAe,uCAAmB,GAAnB,sBAAsB,UAA6B,EAAE,OAAe;IACxF,IAAI;QACF,MAAM,iBAAiB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,+BAA+B;QAC1D,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,gBAAgB;YAAE;QAAQ;QACvC,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,SAAS;YAAM,SAAS,CAAC,wBAAwB,EAAE,WAAW,aAAa,CAAC;QAAC;IACxF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,gCAAgC,EAAE,WAAW,CAAC,CAAC,EAAE;QAChE,OAAO;YAAE,SAAS;YAAO,SAAS,CAAC,oCAAoC,EAAE,WAAW,CAAC,CAAC;QAAC;IACzF;AACF;AAEO,eAAe,uCAAiB,GAAjB;IACpB,IAAI;QACF,MAAM,uBAAuB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,0BAA0B;QAC3D,MAAM,UAAU,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE;QAC7B,IAAI,QAAQ,MAAM,MAAM,QAAQ,IAAI,GAAG,gBAAgB,EAAE;YACvD,OAAO,QAAQ,IAAI,GAAG,gBAAgB;QACxC;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO;IACT;AACF;AAEO,eAAe,uCAAoB,GAApB,uBAAuB,WAAmB;IAC9D,IAAI;QACF,MAAM,uBAAuB,CAAA,GAAA,iKAAA,CAAA,MAAG,AAAD,EAAE,0BAA0B;QAC3D,kEAAkE;QAClE,MAAM,qBAAqB,YAAY,OAAO,CAAC,OAAO;QAEtD,gGAAgG;QAChG,wCAAwC;QACxC,IAAI,CAAC,mBAAmB,UAAU,CAAC,SAAS,mBAAmB,MAAM,GAAG,IAAK;QACzE,qFAAqF;QACrF,uLAAuL;QAC3L;QAEA,MAAM,CAAA,GAAA,iKAAA,CAAA,SAAM,AAAD,EAAE,sBAAsB;YAAE,kBAAkB;QAAY,GAAG;YAAE,OAAO;QAAK,IAAI,wCAAwC;QAChI,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO;YAAE,SAAS;YAAM,SAAS;QAAoD;IACvF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO;YAAE,SAAS;YAAO,SAAS;QAA+D;IACnG;AACF;;;IA1sBsB;IAgDA;IAuBA;IA8CA;IA+FA;IAyFA;IA8CA;IAqBA;IAeA;IASA;IAgCA;IA2BA;IA4CA;IAgBA;IAqBA;IAuBA;IAmCA;IAcA;IAmBA;IAqBA;IAwBA;IAYA;IAcA;;AAtrBA,+OAAA;AAgDA,+OAAA;AAuBA,+OAAA;AA8CA,+OAAA;AA+FA,+OAAA;AAyFA,+OAAA;AA8CA,+OAAA;AAqBA,+OAAA;AAeA,+OAAA;AASA,+OAAA;AAgCA,+OAAA;AA2BA,+OAAA;AA4CA,+OAAA;AAgBA,+OAAA;AAqBA,+OAAA;AAuBA,+OAAA;AAmCA,+OAAA;AAcA,+OAAA;AAmBA,+OAAA;AAqBA,+OAAA;AAwBA,+OAAA;AAYA,+OAAA;AAcA,+OAAA","debugId":null}},
    {"offset": {"line": 1384, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1501, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/settings/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/settings/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/settings/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmS,GAChU,iEACA","debugId":null}},
    {"offset": {"line": 1515, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/settings/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/settings/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/settings/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+Q,GAC5S,6CACA","debugId":null}},
    {"offset": {"line": 1529, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}